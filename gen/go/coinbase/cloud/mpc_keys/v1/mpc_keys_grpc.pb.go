// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MPCKeyServiceClient is the client API for MPCKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MPCKeyServiceClient interface {
	// Registers a new Device. A Device must be registered before it can be added to a DeviceGroup.
	RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	// Retrieves a Device by resource name.
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	// Creates a DeviceGroup. The DeviceGroup must contain exactly one registered Device, and
	// the Seed in the DeviceGroup must have at least one HardenedChild. After calling this,
	// use ListMPCOperations to poll for the pending CreateDeviceGroup operation, and use the WaaS SDK's
	// ComputeMPCOperation to complete the operation.
	CreateDeviceGroup(ctx context.Context, in *CreateDeviceGroupRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Retrieves a DeviceGroup by resource name.
	GetDeviceGroup(ctx context.Context, in *GetDeviceGroupRequest, opts ...grpc.CallOption) (*DeviceGroup, error)
	// Lists the pending MPCOperations awaiting computation associated with the given
	// parent DeviceGroup. Use this API in combination with the WaaS SDK's computeMPCOperation
	// method to complete the operation.
	ListMPCOperations(ctx context.Context, in *ListMPCOperationsRequest, opts ...grpc.CallOption) (*ListMPCOperationsResponse, error)
	// Creates an MPCKey. There must be a HardenedChild in the Seed of the parent
	// DeviceGroup which is a prefix of the derivation path provided in the MPCKey.
	CreateMPCKey(ctx context.Context, in *CreateMPCKeyRequest, opts ...grpc.CallOption) (*MPCKey, error)
	// Retrieves an MPCKey by resource name.
	GetMPCKey(ctx context.Context, in *GetMPCKeyRequest, opts ...grpc.CallOption) (*MPCKey, error)
	// Creates a Signature using an MPCKey. After calling this, use ListMPCOperations
	// to poll for the pending CreateSignature operation, and use the WaaS SDK's
	// computeMPCOperation to complete the operation.
	CreateSignature(ctx context.Context, in *CreateSignatureRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
}

type mPCKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMPCKeyServiceClient(cc grpc.ClientConnInterface) MPCKeyServiceClient {
	return &mPCKeyServiceClient{cc}
}

func (c *mPCKeyServiceClient) RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/coinbase.cloud.mpc_keys.v1.MPCKeyService/RegisterDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPCKeyServiceClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/coinbase.cloud.mpc_keys.v1.MPCKeyService/GetDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPCKeyServiceClient) CreateDeviceGroup(ctx context.Context, in *CreateDeviceGroupRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/coinbase.cloud.mpc_keys.v1.MPCKeyService/CreateDeviceGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPCKeyServiceClient) GetDeviceGroup(ctx context.Context, in *GetDeviceGroupRequest, opts ...grpc.CallOption) (*DeviceGroup, error) {
	out := new(DeviceGroup)
	err := c.cc.Invoke(ctx, "/coinbase.cloud.mpc_keys.v1.MPCKeyService/GetDeviceGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPCKeyServiceClient) ListMPCOperations(ctx context.Context, in *ListMPCOperationsRequest, opts ...grpc.CallOption) (*ListMPCOperationsResponse, error) {
	out := new(ListMPCOperationsResponse)
	err := c.cc.Invoke(ctx, "/coinbase.cloud.mpc_keys.v1.MPCKeyService/ListMPCOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPCKeyServiceClient) CreateMPCKey(ctx context.Context, in *CreateMPCKeyRequest, opts ...grpc.CallOption) (*MPCKey, error) {
	out := new(MPCKey)
	err := c.cc.Invoke(ctx, "/coinbase.cloud.mpc_keys.v1.MPCKeyService/CreateMPCKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPCKeyServiceClient) GetMPCKey(ctx context.Context, in *GetMPCKeyRequest, opts ...grpc.CallOption) (*MPCKey, error) {
	out := new(MPCKey)
	err := c.cc.Invoke(ctx, "/coinbase.cloud.mpc_keys.v1.MPCKeyService/GetMPCKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPCKeyServiceClient) CreateSignature(ctx context.Context, in *CreateSignatureRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/coinbase.cloud.mpc_keys.v1.MPCKeyService/CreateSignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MPCKeyServiceServer is the server API for MPCKeyService service.
// All implementations must embed UnimplementedMPCKeyServiceServer
// for forward compatibility
type MPCKeyServiceServer interface {
	// Registers a new Device. A Device must be registered before it can be added to a DeviceGroup.
	RegisterDevice(context.Context, *RegisterDeviceRequest) (*Device, error)
	// Retrieves a Device by resource name.
	GetDevice(context.Context, *GetDeviceRequest) (*Device, error)
	// Creates a DeviceGroup. The DeviceGroup must contain exactly one registered Device, and
	// the Seed in the DeviceGroup must have at least one HardenedChild. After calling this,
	// use ListMPCOperations to poll for the pending CreateDeviceGroup operation, and use the WaaS SDK's
	// ComputeMPCOperation to complete the operation.
	CreateDeviceGroup(context.Context, *CreateDeviceGroupRequest) (*longrunning.Operation, error)
	// Retrieves a DeviceGroup by resource name.
	GetDeviceGroup(context.Context, *GetDeviceGroupRequest) (*DeviceGroup, error)
	// Lists the pending MPCOperations awaiting computation associated with the given
	// parent DeviceGroup. Use this API in combination with the WaaS SDK's computeMPCOperation
	// method to complete the operation.
	ListMPCOperations(context.Context, *ListMPCOperationsRequest) (*ListMPCOperationsResponse, error)
	// Creates an MPCKey. There must be a HardenedChild in the Seed of the parent
	// DeviceGroup which is a prefix of the derivation path provided in the MPCKey.
	CreateMPCKey(context.Context, *CreateMPCKeyRequest) (*MPCKey, error)
	// Retrieves an MPCKey by resource name.
	GetMPCKey(context.Context, *GetMPCKeyRequest) (*MPCKey, error)
	// Creates a Signature using an MPCKey. After calling this, use ListMPCOperations
	// to poll for the pending CreateSignature operation, and use the WaaS SDK's
	// computeMPCOperation to complete the operation.
	CreateSignature(context.Context, *CreateSignatureRequest) (*longrunning.Operation, error)
	mustEmbedUnimplementedMPCKeyServiceServer()
}

// UnimplementedMPCKeyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMPCKeyServiceServer struct {
}

func (UnimplementedMPCKeyServiceServer) RegisterDevice(context.Context, *RegisterDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDevice not implemented")
}
func (UnimplementedMPCKeyServiceServer) GetDevice(context.Context, *GetDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedMPCKeyServiceServer) CreateDeviceGroup(context.Context, *CreateDeviceGroupRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceGroup not implemented")
}
func (UnimplementedMPCKeyServiceServer) GetDeviceGroup(context.Context, *GetDeviceGroupRequest) (*DeviceGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceGroup not implemented")
}
func (UnimplementedMPCKeyServiceServer) ListMPCOperations(context.Context, *ListMPCOperationsRequest) (*ListMPCOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMPCOperations not implemented")
}
func (UnimplementedMPCKeyServiceServer) CreateMPCKey(context.Context, *CreateMPCKeyRequest) (*MPCKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMPCKey not implemented")
}
func (UnimplementedMPCKeyServiceServer) GetMPCKey(context.Context, *GetMPCKeyRequest) (*MPCKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMPCKey not implemented")
}
func (UnimplementedMPCKeyServiceServer) CreateSignature(context.Context, *CreateSignatureRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSignature not implemented")
}
func (UnimplementedMPCKeyServiceServer) mustEmbedUnimplementedMPCKeyServiceServer() {}

// UnsafeMPCKeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MPCKeyServiceServer will
// result in compilation errors.
type UnsafeMPCKeyServiceServer interface {
	mustEmbedUnimplementedMPCKeyServiceServer()
}

func RegisterMPCKeyServiceServer(s grpc.ServiceRegistrar, srv MPCKeyServiceServer) {
	s.RegisterService(&MPCKeyService_ServiceDesc, srv)
}

func _MPCKeyService_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPCKeyServiceServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coinbase.cloud.mpc_keys.v1.MPCKeyService/RegisterDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPCKeyServiceServer).RegisterDevice(ctx, req.(*RegisterDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPCKeyService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPCKeyServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coinbase.cloud.mpc_keys.v1.MPCKeyService/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPCKeyServiceServer).GetDevice(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPCKeyService_CreateDeviceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPCKeyServiceServer).CreateDeviceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coinbase.cloud.mpc_keys.v1.MPCKeyService/CreateDeviceGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPCKeyServiceServer).CreateDeviceGroup(ctx, req.(*CreateDeviceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPCKeyService_GetDeviceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPCKeyServiceServer).GetDeviceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coinbase.cloud.mpc_keys.v1.MPCKeyService/GetDeviceGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPCKeyServiceServer).GetDeviceGroup(ctx, req.(*GetDeviceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPCKeyService_ListMPCOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMPCOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPCKeyServiceServer).ListMPCOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coinbase.cloud.mpc_keys.v1.MPCKeyService/ListMPCOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPCKeyServiceServer).ListMPCOperations(ctx, req.(*ListMPCOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPCKeyService_CreateMPCKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMPCKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPCKeyServiceServer).CreateMPCKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coinbase.cloud.mpc_keys.v1.MPCKeyService/CreateMPCKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPCKeyServiceServer).CreateMPCKey(ctx, req.(*CreateMPCKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPCKeyService_GetMPCKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMPCKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPCKeyServiceServer).GetMPCKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coinbase.cloud.mpc_keys.v1.MPCKeyService/GetMPCKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPCKeyServiceServer).GetMPCKey(ctx, req.(*GetMPCKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPCKeyService_CreateSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPCKeyServiceServer).CreateSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coinbase.cloud.mpc_keys.v1.MPCKeyService/CreateSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPCKeyServiceServer).CreateSignature(ctx, req.(*CreateSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MPCKeyService_ServiceDesc is the grpc.ServiceDesc for MPCKeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MPCKeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coinbase.cloud.mpc_keys.v1.MPCKeyService",
	HandlerType: (*MPCKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDevice",
			Handler:    _MPCKeyService_RegisterDevice_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _MPCKeyService_GetDevice_Handler,
		},
		{
			MethodName: "CreateDeviceGroup",
			Handler:    _MPCKeyService_CreateDeviceGroup_Handler,
		},
		{
			MethodName: "GetDeviceGroup",
			Handler:    _MPCKeyService_GetDeviceGroup_Handler,
		},
		{
			MethodName: "ListMPCOperations",
			Handler:    _MPCKeyService_ListMPCOperations_Handler,
		},
		{
			MethodName: "CreateMPCKey",
			Handler:    _MPCKeyService_CreateMPCKey_Handler,
		},
		{
			MethodName: "GetMPCKey",
			Handler:    _MPCKeyService_GetMPCKey_Handler,
		},
		{
			MethodName: "CreateSignature",
			Handler:    _MPCKeyService_CreateSignature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coinbase/cloud/mpc_keys/v1/mpc_keys.proto",
}
