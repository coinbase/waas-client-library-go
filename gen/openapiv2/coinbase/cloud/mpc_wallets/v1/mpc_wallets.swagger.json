{
  "swagger": "2.0",
  "info": {
    "title": "Coinbase Cloud - WaaS MPC Wallets API",
    "version": "1.0"
  },
  "tags": [
    {
      "name": "MPCWalletService",
      "description": "A service that manages BIP-32-based Hierarchically Deterministic (HD) collections of on-chain Addresses and their associated Asset balances. The Addresses are backed by the MPCKey resources of KeyService, and information about the Assets can be queried using BlockchainService. Because of the backing by MPC Keys, full functionality of these APIs requires use of the WaaS SDK."
    }
  ],
  "host": "https://api.coinbasecloud.com/waas/mpcWallets",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/{addressName}/balances": {
      "get": {
        "summary": "List Balances",
        "description": "Lists Balances.",
        "operationId": "MPCWalletService_ListBalances",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListBalancesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "addressName",
            "description": "The resource name of the parent Address.\nFormat: networks/{networkID}/addresses/{addressID}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "networks/[^/]+/addresses/[^/]+"
          },
          {
            "name": "pageSize",
            "description": "The maximum number of Balances to return. If unspecified, at most 50 Balances\nwill be returned.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "A page token, received from a previous ListBalances call.\nProvide this to retrieve the subsequent page.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MPCWalletService"
        ]
      }
    },
    "/v1/{mpcWalletName}": {
      "get": {
        "summary": "Get MPC Wallet",
        "description": "Gets an MPCWallet.",
        "operationId": "MPCWalletService_GetMPCWallet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MPCWallet"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "mpcWalletName",
            "description": "The resource name of the MPCWallet to get.\nFormat: pools/{poolID}/mpcWallets/{mpcWalletID}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "pools/[^/]+/mpcWallets/[^/]+"
          }
        ],
        "tags": [
          "MPCWalletService"
        ]
      }
    },
    "/v1/{mpcWalletName}:generateAddress": {
      "post": {
        "summary": "Generate Address",
        "description": "Generates an Address within an MPCWallet.",
        "operationId": "MPCWalletService_GenerateAddress",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Address"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "mpcWalletName",
            "description": "The resource name of the MPCWallet within which to generate the Address.\nFormat: pools/{poolID}/mpcWallets/{mpcWalletID}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "pools/[^/]+/mpcWallets/[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "network": {
                  "type": "string",
                  "title": "The resource name of the Network for which to generate the Address.\nFormat: networks/{networkID}"
                },
                "requestId": {
                  "type": "string",
                  "description": "A user-provided request ID to allow for idempotency. This should be a UUID."
                }
              },
              "description": "The request message for GenerateAddress.",
              "required": [
                "network"
              ]
            }
          }
        ],
        "tags": [
          "MPCWalletService"
        ]
      }
    },
    "/v1/{networkName}": {
      "get": {
        "summary": "Get Address",
        "description": "Gets an Address.",
        "operationId": "MPCWalletService_GetAddress",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Address"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "networkName",
            "description": "The resource name of the Address to get.\nFormat: networks/{networkID}/addresses/{addressID}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "networks/[^/]+/addresses/[^/]+"
          }
        ],
        "tags": [
          "MPCWalletService"
        ]
      }
    },
    "/v1/{networkName}/addresses": {
      "get": {
        "summary": "List Addresses",
        "description": "Lists Addresses.",
        "operationId": "MPCWalletService_ListAddresses",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAddressesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "networkName",
            "description": "The resource name of the parent Network.\nFormat: networks/{networkID}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "networks/[^/]+"
          },
          {
            "name": "mpcWallet",
            "description": "The resource name of the MPCWallet to which the Addresses belong.\nFormat: pools/{poolID}/mpcWallets/{mpcWalletID}",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "The maximum number of Addresses to return. If unspecified, at most 50 Addresses\nwill be returned.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "A page token, received from a previous ListAddresses call.\nProvide this to retrieve the subsequent page.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MPCWalletService"
        ]
      }
    },
    "/v1/{poolName}/mpcWallets": {
      "get": {
        "summary": "List MPC Wallets",
        "description": "Lists MPCWallets.",
        "operationId": "MPCWalletService_ListMPCWallets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMPCWalletsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "poolName",
            "description": "The resource name of the parent Pool.\nFormat: pools/{poolID}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "pools/[^/]+"
          },
          {
            "name": "pageSize",
            "description": "The maximum number of MPCWallets to return. If unspecified, at most 50 MPCWallets\nwill be returned.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "A page token, received from a previous ListMPCWallets call.\nProvide this to retrieve the subsequent page.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MPCWalletService"
        ]
      },
      "post": {
        "summary": "Create MPC Wallet",
        "description": "Creates an MPCWallet. The Device in the request must have been registered using MPCKeyService's RegisterDevice before this method is called. Under the hood, this calls MPCKeyService's CreateDeviceGroup with the appropriate parameters. After calling this, use MPCKeyService's ListMPCOperations to poll for the pending CreateDeviceGroup operation, and use the WaaS SDK's ComputeMPCOperation to complete the operation.",
        "operationId": "MPCWalletService_CreateMPCWallet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/googlelongrunningOperation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "poolName",
            "description": "The resource name of the parent Pool.\nFormat: pools/{poolID}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "pools/[^/]+"
          },
          {
            "name": "mpcWallet",
            "description": "The MPCWallet to be created. This should be blank.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1MPCWallet",
              "required": [
                "mpcWallet"
              ]
            }
          },
          {
            "name": "device",
            "description": "The resource name of the Device that will initially be the sole member of the underlying\nDeviceGroup. This Device should have already been registered using MPCKeyService's\nRegisterDevice.\nFormat: devices/{deviceID}",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceGroupId",
            "description": "The resource ID to use for the underlying DeviceGroup, which will become the final component\nof the underlying DeviceGroup's resource name. This is required, as the DeviceGroup name must\nbe used to poll ListMPCOperations to complete the CreateDeviceGroup operation.\nThis should be a UUID.",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestId",
            "description": "A user-provided request ID to allow for idempotency. This should be a UUID.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MPCWalletService"
        ]
      }
    }
  },
  "definitions": {
    "googlelongrunningOperation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should be a resource name ending with `operations/{unique_id}`."
        },
        "metadata": {
          "$ref": "#/definitions/protobufAny",
          "description": "Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any."
        },
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable."
        },
        "error": {
          "$ref": "#/definitions/rpcStatus",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "response": {
          "$ref": "#/definitions/protobufAny",
          "description": "The normal response of the operation in case of success.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`/`Create`/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`."
        }
      },
      "description": "This resource represents a long-running operation that is the result of a\nnetwork API call."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of\n[google.rpc.Code][google.rpc.Code]."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized\nby the client."
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "v1Address": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The resource name of the Address.\nFormat: networks/{networkID}/addresses/{addressID}",
          "title": "name",
          "readOnly": true
        },
        "address": {
          "type": "string",
          "description": "The address value - for example, a 0x-prefixed checksummed hexadecimal string. This is equal to the resource ID of the Address.",
          "title": "address",
          "readOnly": true
        },
        "mpcKeys": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The resource names of the MPCKeys that back this Address. For EVM networks, there will be only one MPCKey.\n Format: pools/{poolID}/deviceGroups/{deviceGroupID}/mpcKeys/{mpcKeyID}",
          "title": "mpcKeys",
          "readOnly": true
        },
        "mpcWallet": {
          "type": "string",
          "description": "The resource name of the MPCWallet to which this Address belongs. Format: pools/{pool}/mpcWallets/{mpcWallet}",
          "title": "mpcWallet",
          "readOnly": true
        }
      },
      "description": "The Address resource, which represents an on-chain Address backed by an MPCKey in an MPCWallet.",
      "title": "Address"
    },
    "v1Balance": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The resource name of the Balance.\nFormat: networks/{networkID}/addresses/{addressID}/balances/{balanceID}",
          "title": "name",
          "readOnly": true
        },
        "asset": {
          "type": "string",
          "description": "The resource name of the Asset to which this Balance corresponds. Format: networks/{network}/assets/{asset}",
          "title": "asset",
          "readOnly": true
        },
        "amount": {
          "type": "string",
          "description": "The amount of the Asset, denominated in atomic units of the asset (e.g. Wei for Ether),\nas a base-10 number.",
          "readOnly": true
        },
        "mpcWallet": {
          "type": "string",
          "description": "The resource name of the MPCWallet to which this Balance belongs. Format: pools/{pool}/mpcWallets/{mpcWallet}",
          "title": "mpcWallet",
          "readOnly": true
        }
      },
      "description": "The Balance resource, which represents an amount of an Asset held on-chain by an Address.",
      "title": "Balance"
    },
    "v1ListAddressesResponse": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Address"
          },
          "description": "The list of Addresses."
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as page_token to retrieve the next page.\nIf this field is omitted, there are no subsequent pages."
        }
      },
      "description": "The response message for ListAddresses.",
      "title": "ListAddressesResponse"
    },
    "v1ListBalancesResponse": {
      "type": "object",
      "properties": {
        "balances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Balance"
          },
          "description": "The list of Balances."
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as page_token to retrieve the next page.\nIf this field is omitted, there are no subsequent pages."
        }
      },
      "description": "The response message for ListBalances.",
      "title": "ListBalancesResponse"
    },
    "v1ListMPCWalletsResponse": {
      "type": "object",
      "properties": {
        "mpcWallets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MPCWallet"
          },
          "description": "The list of MPCWallets."
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as page_token to retrieve the next page.\nIf this field is omitted, there are no subsequent pages."
        }
      },
      "description": "The response message for ListMPCWallets.",
      "title": "ListMPCWalletsResponse"
    },
    "v1MPCWallet": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The resource name of the MPCWallet.\nFormat: pools/{poolID}/mpcWallets/{mpcWalletID}",
          "title": "name",
          "readOnly": true
        },
        "deviceGroup": {
          "type": "string",
          "description": "The resource name of the MPCKeyService DeviceGroup associated with this MPCWallet. The DeviceGroup will perform the underlying MPC operations. Format: pools/{poolID}/deviceGroups/{deviceGroupID}",
          "title": "deviceGroup",
          "readOnly": true
        }
      },
      "description": "The MPCWallet resource, which represents a collection of on-chain Addresses and their backing MPCKeys.",
      "title": "MPCWallet"
    }
  }
}
