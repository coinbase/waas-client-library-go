// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	gax "github.com/googleapis/gax-go/v2"
	grpc "google.golang.org/grpc"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"

	mock "github.com/stretchr/testify/mock"

	mpc_walletsv1 "github.com/coinbase/waas-client-library-go/gen/go/coinbase/cloud/mpc_wallets/v1"

	v1 "github.com/coinbase/waas-client-library-go/clients/v1"
)

// MPCWalletServiceClient is an autogenerated mock type for the MPCWalletServiceClient type
type MPCWalletServiceClient struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MPCWalletServiceClient) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connection provides a mock function with given fields:
func (_m *MPCWalletServiceClient) Connection() *grpc.ClientConn {
	ret := _m.Called()

	var r0 *grpc.ClientConn
	if rf, ok := ret.Get(0).(func() *grpc.ClientConn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ClientConn)
		}
	}

	return r0
}

// CreateMPCWallet provides a mock function with given fields: ctx, req, opts
func (_m *MPCWalletServiceClient) CreateMPCWallet(ctx context.Context, req *mpc_walletsv1.CreateMPCWalletRequest, opts ...gax.CallOption) (v1.ClientWrappedCreateMPCWalletOperation, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 v1.ClientWrappedCreateMPCWalletOperation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mpc_walletsv1.CreateMPCWalletRequest, ...gax.CallOption) (v1.ClientWrappedCreateMPCWalletOperation, error)); ok {
		return rf(ctx, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mpc_walletsv1.CreateMPCWalletRequest, ...gax.CallOption) v1.ClientWrappedCreateMPCWalletOperation); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.ClientWrappedCreateMPCWalletOperation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mpc_walletsv1.CreateMPCWalletRequest, ...gax.CallOption) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMPCWalletOperation provides a mock function with given fields: name
func (_m *MPCWalletServiceClient) CreateMPCWalletOperation(name string) v1.ClientWrappedCreateMPCWalletOperation {
	ret := _m.Called(name)

	var r0 v1.ClientWrappedCreateMPCWalletOperation
	if rf, ok := ret.Get(0).(func(string) v1.ClientWrappedCreateMPCWalletOperation); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.ClientWrappedCreateMPCWalletOperation)
		}
	}

	return r0
}

// GenerateAddress provides a mock function with given fields: ctx, req, opts
func (_m *MPCWalletServiceClient) GenerateAddress(ctx context.Context, req *mpc_walletsv1.GenerateAddressRequest, opts ...gax.CallOption) (*mpc_walletsv1.Address, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mpc_walletsv1.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mpc_walletsv1.GenerateAddressRequest, ...gax.CallOption) (*mpc_walletsv1.Address, error)); ok {
		return rf(ctx, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mpc_walletsv1.GenerateAddressRequest, ...gax.CallOption) *mpc_walletsv1.Address); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpc_walletsv1.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mpc_walletsv1.GenerateAddressRequest, ...gax.CallOption) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddress provides a mock function with given fields: ctx, req, opts
func (_m *MPCWalletServiceClient) GetAddress(ctx context.Context, req *mpc_walletsv1.GetAddressRequest, opts ...gax.CallOption) (*mpc_walletsv1.Address, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mpc_walletsv1.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mpc_walletsv1.GetAddressRequest, ...gax.CallOption) (*mpc_walletsv1.Address, error)); ok {
		return rf(ctx, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mpc_walletsv1.GetAddressRequest, ...gax.CallOption) *mpc_walletsv1.Address); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpc_walletsv1.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mpc_walletsv1.GetAddressRequest, ...gax.CallOption) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMPCWallet provides a mock function with given fields: ctx, req, opts
func (_m *MPCWalletServiceClient) GetMPCWallet(ctx context.Context, req *mpc_walletsv1.GetMPCWalletRequest, opts ...gax.CallOption) (*mpc_walletsv1.MPCWallet, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mpc_walletsv1.MPCWallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mpc_walletsv1.GetMPCWalletRequest, ...gax.CallOption) (*mpc_walletsv1.MPCWallet, error)); ok {
		return rf(ctx, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mpc_walletsv1.GetMPCWalletRequest, ...gax.CallOption) *mpc_walletsv1.MPCWallet); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpc_walletsv1.MPCWallet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mpc_walletsv1.GetMPCWalletRequest, ...gax.CallOption) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperation provides a mock function with given fields: ctx, req, opts
func (_m *MPCWalletServiceClient) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *longrunningpb.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *longrunningpb.GetOperationRequest, ...gax.CallOption) (*longrunningpb.Operation, error)); ok {
		return rf(ctx, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *longrunningpb.GetOperationRequest, ...gax.CallOption) *longrunningpb.Operation); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*longrunningpb.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *longrunningpb.GetOperationRequest, ...gax.CallOption) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAddresses provides a mock function with given fields: ctx, req, opts
func (_m *MPCWalletServiceClient) ListAddresses(ctx context.Context, req *mpc_walletsv1.ListAddressesRequest, opts ...gax.CallOption) v1.AddressIterator {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 v1.AddressIterator
	if rf, ok := ret.Get(0).(func(context.Context, *mpc_walletsv1.ListAddressesRequest, ...gax.CallOption) v1.AddressIterator); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.AddressIterator)
		}
	}

	return r0
}

// ListBalanceDetails provides a mock function with given fields: ctx, req, opts
func (_m *MPCWalletServiceClient) ListBalanceDetails(ctx context.Context, req *mpc_walletsv1.ListBalanceDetailsRequest, opts ...gax.CallOption) v1.BalanceDetailIterator {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 v1.BalanceDetailIterator
	if rf, ok := ret.Get(0).(func(context.Context, *mpc_walletsv1.ListBalanceDetailsRequest, ...gax.CallOption) v1.BalanceDetailIterator); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.BalanceDetailIterator)
		}
	}

	return r0
}

// ListBalances provides a mock function with given fields: ctx, req, opts
func (_m *MPCWalletServiceClient) ListBalances(ctx context.Context, req *mpc_walletsv1.ListBalancesRequest, opts ...gax.CallOption) v1.BalanceIterator {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 v1.BalanceIterator
	if rf, ok := ret.Get(0).(func(context.Context, *mpc_walletsv1.ListBalancesRequest, ...gax.CallOption) v1.BalanceIterator); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.BalanceIterator)
		}
	}

	return r0
}

// ListMPCWallets provides a mock function with given fields: ctx, req, opts
func (_m *MPCWalletServiceClient) ListMPCWallets(ctx context.Context, req *mpc_walletsv1.ListMPCWalletsRequest, opts ...gax.CallOption) v1.MPCWalletIterator {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 v1.MPCWalletIterator
	if rf, ok := ret.Get(0).(func(context.Context, *mpc_walletsv1.ListMPCWalletsRequest, ...gax.CallOption) v1.MPCWalletIterator); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.MPCWalletIterator)
		}
	}

	return r0
}

// NewMPCWalletServiceClient creates a new instance of MPCWalletServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMPCWalletServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MPCWalletServiceClient {
	mock := &MPCWalletServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
