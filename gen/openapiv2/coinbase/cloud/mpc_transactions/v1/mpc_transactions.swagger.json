{
  "swagger": "2.0",
  "info": {
    "title": "MPC Transactions API",
    "version": "1.0"
  },
  "tags": [
    {
      "name": "MPCTransactionService",
      "description": "A service that orchestrates on-chain transactions originating from MPCWallets. The service handles nonce management, transaction construction, signing, broadcasting, and confirmation detection including on-chain re-organizations."
    }
  ],
  "host": "https://api.developer.coinbase.com/waas/mpc_transactions",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/{mpcTransactionName}": {
      "get": {
        "summary": "GetMPCTransaction",
        "description": "Gets an MPCTransaction. There can be a delay between when CreateMPCTransaction is called and when this API returns an MPCTransaction in the CREATED state.",
        "operationId": "MPCTransactionService_GetMPCTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MPCTransaction"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "mpcTransactionName",
            "description": "The resource name of the MPCTransaction.\nFormat: pools/{pool_id}/mpcWallets/{mpc_wallet_id}/mpcTransactions/{mpc_transaction_id}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "pools/[^/]+/mpcWallets/[^/]+/mpcTransactions/[^/]+"
          }
        ],
        "tags": [
          "MPCTransactionService"
        ]
      }
    },
    "/v1/{mpcWalletName}/mpcTransactions": {
      "get": {
        "summary": "ListMPCTransactions",
        "description": "Returns a list of MPCTransactions in an MPCWallet.",
        "operationId": "MPCTransactionService_ListMPCTransactions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMPCTransactionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "mpcWalletName",
            "description": "The resource name of the parent MPCWallet.\nFormat: pools/{pool_id}/mpcWallets/{mpc_wallet_id}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "pools/[^/]+/mpcWallets/[^/]+"
          },
          {
            "name": "pageSize",
            "description": "The maximum number of MPCTransactions to return. The default is 50.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "A page token, received from a previous ListMPCTransactions call.\nProvide this to retrieve the subsequent page.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MPCTransactionService"
        ]
      },
      "post": {
        "summary": "CreateMPCTransaction",
        "description": "Creates an MPCTransaction.\n\n The long-running operation returned from this API contains information about the state of the MPCTransaction that can be used to complete the operation. The LRO is considered Done when the MPCTransaction reaches a state of `CONFIRMING` (i.e., broadcast on-chain). See the MPCTransaction documentation for its lifecycle.",
        "operationId": "MPCTransactionService_CreateMPCTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/googlelongrunningOperation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "mpcWalletName",
            "description": "The resource name of the parent MPCWallet.\nFormat: pools/{pool_id}/mpcWallets/{mpc_wallet_id}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "pools/[^/]+/mpcWallets/[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "mpcTransaction": {
                  "$ref": "#/definitions/v1MPCTransaction",
                  "description": "The MPCTransaction to be created."
                },
                "input": {
                  "$ref": "#/definitions/v1TransactionInput",
                  "description": "The transaction input."
                },
                "overrideNonce": {
                  "type": "boolean",
                  "description": "Whether the nonce specified in the transaction input should be respected, as opposed to assigned by the service. This is intended for the use case of replacing transactions that fail to confirm on-chain due to too low of a transaction fee. Setting this to true has the side effect of canceling any pending transactions from the same address with nonce greater than or equal to the one provided. Use this with caution.",
                  "title": "input"
                },
                "requestId": {
                  "type": "string",
                  "description": "A user-provided request ID to allow for idempotency. This should be a UUID."
                }
              },
              "description": "The request message for CreateMPCTransaction.",
              "required": [
                "mpcTransaction",
                "input"
              ]
            }
          }
        ],
        "tags": [
          "MPCTransactionService"
        ]
      }
    }
  },
  "definitions": {
    "MPCTransactionState": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "CREATED",
        "SIGNING",
        "SIGNED",
        "CONFIRMING",
        "CONFIRMED",
        "FAILED",
        "CANCELLED"
      ],
      "default": "STATE_UNSPECIFIED",
      "description": "The state of the MPCTransaction.\n\n - STATE_UNSPECIFIED: The default unspecified state.\n - CREATED: The request to create the MPCTransaction has been received by the service.\n - SIGNING: The MPCTransaction is waiting to be signed by the WaaS SDK.\nOnly one MPCTransaction per Address can be in the SIGNING state.\n - SIGNED: The MPCTransaction has been signed and is waiting to be broadcast on-chain.\n - CONFIRMING: The MPCTransaction has been successfully broadcast on-chain and is awaiting confirmation.\n - CONFIRMED: The MPCTransaction has been confirmed on-chain. It is possible for the MPCTransaction\nto revert to CONFIRMING if there is an on-chain reorganization.\n - FAILED: The MPCTransaction was broadcast, but failed on-chain.\n - CANCELLED: The MPCTransaction was cancelled by the service."
    },
    "googlelongrunningOperation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should be a resource name ending with `operations/{unique_id}`."
        },
        "metadata": {
          "$ref": "#/definitions/protobufAny",
          "description": "Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any."
        },
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable."
        },
        "error": {
          "$ref": "#/definitions/rpcStatus",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "response": {
          "$ref": "#/definitions/protobufAny",
          "description": "The normal response of the operation in case of success.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`/`Create`/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`."
        }
      },
      "description": "This resource represents a long-running operation that is the result of a\nnetwork API call."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of\n[google.rpc.Code][google.rpc.Code]."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized\nby the client."
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "v1ECDSASignature": {
      "type": "object",
      "properties": {
        "r": {
          "type": "string",
          "format": "byte",
          "description": "The 32-byte R value of the signature in big-endian order."
        },
        "s": {
          "type": "string",
          "format": "byte",
          "description": "The 32-byte S value of the signature in big-endian order."
        },
        "v": {
          "type": "integer",
          "format": "int32",
          "description": "The V value of the signature, if it exists."
        }
      },
      "description": "A digital signature produced by the elliptic curve digital signature algorithm (ECDSA)."
    },
    "v1EIP1559TransactionInput": {
      "type": "object",
      "properties": {
        "chainId": {
          "type": "string",
          "description": "The chain ID of the transaction either as a \"0x\"-prefixed hex string or a base-10 number."
        },
        "nonce": {
          "type": "string",
          "format": "uint64",
          "description": "The nonce of the transaction. This value may be ignored depending on the API."
        },
        "maxPriorityFeePerGas": {
          "type": "string",
          "description": "The EIP-1559 maximum priority fee per gas either as a \"0x\"-prefixed hex string or a base-10 number."
        },
        "maxFeePerGas": {
          "type": "string",
          "description": "The EIP-1559 maximum fee per gas either as a \"0x\"-prefixed hex string or a base-10 number."
        },
        "gas": {
          "type": "string",
          "format": "uint64",
          "description": "The maximum amount of gas to use on the transaction."
        },
        "fromAddress": {
          "type": "string",
          "description": "The checksummed address from which the transaction will originate, as a \"0x\"-prefixed hex string.\nNote: This is NOT a WaaS Address resource of the form\nnetworks/{networkID}/addresses/{addressID}."
        },
        "toAddress": {
          "type": "string",
          "description": "The checksummed address to which the transaction is addressed, as a \"0x\"-prefixed hex string.\nNote: This is NOT a WaaS Address resource of the form\nnetworks/{networkID}/addresses/{addressID}."
        },
        "value": {
          "type": "string",
          "description": "The native value of the transaction as a \"0x\"-prefixed hex string or a base-10 number."
        },
        "data": {
          "type": "string",
          "format": "byte",
          "description": "The data for the transaction."
        }
      },
      "description": "A message representing an EIP-1559 transaction input."
    },
    "v1ListMPCTransactionsResponse": {
      "type": "object",
      "properties": {
        "mpcTransactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MPCTransaction"
          },
          "description": "The list of MPCTransactions."
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as page_token to retrieve the next page.\nIf this field is omitted, there are no subsequent pages."
        }
      },
      "description": "The response message for ListMPCTransactions.",
      "title": "ListMPCTransactionsResponse"
    },
    "v1MPCTransaction": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "pools/95257c5a-522f-4241-bf97-2656a8e9cc91/mpcWallets/d28197e8-372c-461c-9a00-2da3c528c2d1/mpcTransactions/f2a9a712-f483-4790-8a18-0e7c18aeafec",
          "description": "The resource name of the MPCTransaction.\nFormat: pools/{pool_id}/mpcWallets/{mpc_wallet_id}/mpcTransactions/{mpc_transaction_id}",
          "title": "name",
          "readOnly": true
        },
        "network": {
          "type": "string",
          "example": "networks/ethereum-goerli",
          "description": "The resource name of the Network on which to broadcast the MPCTransaction.\n Format: networks/{network_id}",
          "title": "network"
        },
        "fromAddresses": {
          "type": "array",
          "example": [
            "networks/ethereum-goerli/addresses/0xDAFEA492D9c6733ae3d56b7Ed1ADB60692c98Bc5"
          ],
          "items": {
            "type": "string"
          },
          "description": "The resource name of the Addresses from which to send the MPCTransaction. For account-based Networks, only the first address is used.\n Format: networks/{network_id}/addresses/{address_id}.",
          "title": "from_addresses"
        },
        "state": {
          "$ref": "#/definitions/MPCTransactionState",
          "example": "CONFIRMING",
          "description": "The current state of the MPCTransaction.",
          "title": "state",
          "readOnly": true
        },
        "transaction": {
          "$ref": "#/definitions/v1Transaction",
          "description": "The underlying transaction to be signed and broadcast. Fields in the transaction, such as the hash, will become populated as the MPCTransaction goes through its lifecycle.",
          "title": "transaction",
          "readOnly": true
        }
      },
      "description": "The MPCTransaction resource, which represents a transaction that is in the process of being fulfilled. The lifecycle of a successful MPC transaction has five parts:\n\n 1. CREATED - The request has been received by the service.\n 2. SIGNING - The MPCTransaction is waiting to be signed. At this point, the WaaS SDK must poll for and process the CREATE_SIGNATURE MPCOperation of the DeviceGroup associated with the underlying Address. For any given Address, only one MPCTransaction can be in the SIGNING state at a given time - i.e., an MPCTransaction must be successfully signed before the the next one can be signed.\n 3. SIGNED - The MPCTransaction has been signed and is waiting to be broadcast on-chain. MPCTransactions are broadcast on a regular periodic schedule proportional to the block production speed of the Network.\n 4. CONFIRMING - The MPCTransaction has been successfully broadcast on-chain and is awaiting confirmation.\n 5. CONFIRMED - The MPCTransaction has been confirmed on-chain. It is possible for the MPCTransaction to revert to CONFIRMING if there is an on-chain reorganization.",
      "title": "MPCTransaction",
      "required": [
        "network",
        "fromAddresses"
      ]
    },
    "v1RLPTransaction": {
      "type": "object",
      "properties": {
        "sender": {
          "type": "string",
          "description": "The sender address as a hexadecimal string, prefixed with 0x."
        },
        "transactionRlp": {
          "type": "string",
          "format": "byte",
          "description": "The RLP-encoded transaction as a byte array.\nSee https://github.com/ethereum/go-ethereum/blob/master/rlp/encode.go for an implementation."
        }
      },
      "description": "A message representing a transaction encoded using Recursive-Length Prefix (RLP)\nSerialization. See https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/\nfor more details."
    },
    "v1RequiredSignature": {
      "type": "object",
      "properties": {
        "payload": {
          "type": "string",
          "format": "byte",
          "description": "The payload to be signed. The TransactionInput must be transformed into\nthis payload. For EVM chains, this would be the hash of the type-prefixed\nRLP encoding of the transaction defined in EIP-2718. This is also the\nvalue that should be used in the MPCKeyService's CreateSignature API."
        },
        "signature": {
          "$ref": "#/definitions/v1Signature",
          "description": "The signature representing the signed payload. This must be set in order\nfor a Transaction to be broadcast."
        }
      },
      "description": "A message representing a payload to be signed and its result."
    },
    "v1Signature": {
      "type": "object",
      "properties": {
        "ecdsaSignature": {
          "$ref": "#/definitions/v1ECDSASignature",
          "description": "An ECDSA signature."
        }
      },
      "description": "A digital signature produced by a signing algorithm."
    },
    "v1Transaction": {
      "type": "object",
      "properties": {
        "input": {
          "$ref": "#/definitions/v1TransactionInput",
          "description": "A user-specified transaction in one of the supported input types."
        },
        "requiredSignatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1RequiredSignature"
          },
          "description": "The set of signatures required to broadcast this Transaction.\nFor EVM networks, there will be only one signature."
        },
        "rawSignedTransaction": {
          "type": "string",
          "format": "byte",
          "description": "The signed transaction to be broadcast. This value can be directly broadcast on-chain.\nThe Signatures in required_signatures need to be transformed into this value.\nFor EVM chains, this is just the R, S, and V values of the signature concatenated."
        },
        "hash": {
          "type": "string",
          "description": "The hash of the signed transaction."
        }
      },
      "description": "A message that wraps protocol-specific transactions, and provides additional\npayloads that enable the transaction to be signed and broadcast."
    },
    "v1TransactionInput": {
      "type": "object",
      "properties": {
        "ethereumRlpInput": {
          "$ref": "#/definitions/v1RLPTransaction",
          "description": "An Ethereum RLP transaction."
        },
        "ethereum1559Input": {
          "$ref": "#/definitions/v1EIP1559TransactionInput",
          "description": "An EIP-1559 transaction."
        }
      },
      "description": "A message that contains each of the different transaction types we support."
    }
  }
}
