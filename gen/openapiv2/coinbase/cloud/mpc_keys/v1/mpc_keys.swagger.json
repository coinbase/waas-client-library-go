{
  "swagger": "2.0",
  "info": {
    "title": "MPCKeys API",
    "version": "1.0"
  },
  "tags": [
    {
      "name": "MPCKeyService",
      "description": "MPCKeyService provides APIs for participating in cryptographic operations through multi-party computation (MPC). It should be be used in conjunction with the client-side WaaS SDK. The cryptographic Keys are created using an underlying hierarchically deterministic (HD) Tree, following the conventions of BIP-32 and BIP-44. The general flow is as follows:\n 1. Call RegisterDevice to enroll the mobile Device.\n 2. Call CreateDeviceGroup with the registered Device as its sole member and at least one HardenedChild set on the Seed.\n 3. Poll for the pending DeviceGroup with ListMPCOperations and compute the MPCOperation using the WaaS SDK.\n 4. Call CreateMPCKey, specifying the created DeviceGroup and desired derivation path.\n 5. Call CreateSignature, specifying the created MPCKey and payload.\n 6. Poll for the pending Signature with ListMPCOperations and compute the MPCOperation using the WaaS SDK."
    }
  ],
  "host": "api.developer.coinbase.com/waas/mpc_keys",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/device:register": {
      "post": {
        "summary": "RegisterDevice",
        "description": "Registers a new Device. A Device must be registered before it can be added to a DeviceGroup.",
        "operationId": "MPCKeyService_RegisterDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Device"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The request message for RegisterDevice.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RegisterDeviceRequest"
            }
          }
        ],
        "tags": [
          "MPCKeyService"
        ]
      }
    },
    "/v1/device:revoke": {
      "post": {
        "summary": "RevokeDevice",
        "description": "Revokes a registered Device.\n This operation removes the registered Device from all the DeviceGroups that it is a part of.\n Once the Device is revoked, cryptographic materials in your physical Device are invalidated, and the Device can no longer participate in any MPCOperations of the DeviceGroups it was a part of. Use this API in scenarios such as losing the existing Device, switching to a new physical Device, etc.\n Ensure that a new Device is successfully added to your DeviceGroups using the AddDevice RPC before invoking the RevokeDevice RPC.",
        "operationId": "MPCKeyService_RevokeDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The request message for RevokeDevice.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RevokeDeviceRequest"
            }
          }
        ],
        "tags": [
          "MPCKeyService"
        ]
      }
    },
    "/v1/{deviceGroupName}": {
      "get": {
        "summary": "GetDeviceGroup",
        "description": "Retrieves a DeviceGroup by resource name.",
        "operationId": "MPCKeyService_GetDeviceGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeviceGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "deviceGroupName",
            "description": "The resource name of the DeviceGroup.\nFormat: pools/{pool_id}/deviceGroups/{device_group_id}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "pools/[^/]+/deviceGroups/[^/]+"
          }
        ],
        "tags": [
          "MPCKeyService"
        ]
      }
    },
    "/v1/{deviceGroupName}/mpcKeys": {
      "post": {
        "summary": "CreateMPCKey",
        "description": "Creates an MPCKey. There must be a HardenedChild in the Seed of the parent DeviceGroup which is a prefix of the derivation path provided in the MPCKey.",
        "operationId": "MPCKeyService_CreateMPCKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MPCKey"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "deviceGroupName",
            "description": "The resource name of the parent DeviceGroup.\nFormat: pools/{pool_id}/deviceGroups/{device_group_id}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "pools/[^/]+/deviceGroups/[^/]+"
          },
          {
            "name": "mpcKey",
            "description": "The MPCKey to be created.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1MPCKey",
              "required": [
                "mpcKey"
              ]
            }
          },
          {
            "name": "requestId",
            "description": "A user-provided request ID to allow for idempotency. This should be a UUID.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MPCKeyService"
        ]
      }
    },
    "/v1/{deviceGroupName}/mpcOperations": {
      "get": {
        "summary": "ListMPCOperations",
        "description": "Lists the pending MPCOperations awaiting computation associated with the given parent DeviceGroup.\n\n Use this API in combination with the WaaS SDK's computeMPCOperation method to complete the operation.",
        "operationId": "MPCKeyService_ListMPCOperations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMPCOperationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "deviceGroupName",
            "description": "The resource name of the parent DeviceGroup.\nFormat: pools/{pool_id}/deviceGroups/{device_group_id}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "pools/[^/]+/deviceGroups/[^/]+"
          }
        ],
        "tags": [
          "MPCKeyService"
        ]
      }
    },
    "/v1/{deviceGroupName}:addDevice": {
      "post": {
        "summary": "AddDevice",
        "description": "Adds a Device to an existing DeviceGroup. \n\nPrior to this API being called, the Device must be registered using RegisterDevice RPC. \n\n The Device must have access to the backup created with PrepareDeviceBackup RPC to compute this operation. \n\n After calling this RPC, use ListMPCOperations to poll for the pending AddDevice operation, and use the WaaS SDK's ComputeAddDeviceMPCOperation to complete the operation. After the operation is computed on WaaS SDK, the Device will have access to cryptographic materials required to process MPCOperations for this DeviceGroup.  \n\nOnce the operation completes on MPCKeyService, the Device will be added to the given DeviceGroup as a new member and all existing Devices in the DeviceGroup will stay functional.  \n\nMPCKeyService will expose RemoveDevice RPC in a future release that can remove any of the existing Devices from the DeviceGroup.",
        "operationId": "MPCKeyService_AddDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/googlelongrunningOperation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "deviceGroupName",
            "description": "The resource name of the DeviceGroup to which the Device is being added.\nFormat: pools/{pool_id}/deviceGroups/{device_group_id}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "pools/[^/]+/deviceGroups/[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "device": {
                  "type": "string",
                  "title": "The resource name of the Device that is being added to the DeviceGroup.\nThe Device must not be part of the DeviceGroup specified above.\nFormat: devices/{device_id}"
                },
                "requestId": {
                  "type": "string",
                  "description": "A user-provided request ID to allow for idempotency. This should be a UUID."
                }
              },
              "description": "The request message for AddDevice.",
              "required": [
                "device"
              ]
            }
          }
        ],
        "tags": [
          "MPCKeyService"
        ]
      }
    },
    "/v1/{deviceGroupName}:prepareDeviceArchive": {
      "post": {
        "summary": "PrepareDeviceArchive",
        "description": "Prepares an archive in the local storage of the given Device.\n\n The archive contains cryptographic materials that can be used to export MPCKeys, which have the given DeviceGroup as their parent.\n\n The Device specified in the request must be a member of this DeviceGroup and must participate in the associated MPC operation for the archive to be prepared. After calling this, use ListMPCOperations to poll for the pending PrepareDeviceArchive operation, and use the WaaS SDK's ComputeMPCOperation to complete the operation.\n\n Once the operation completes, the Device can utilize the WaaS SDK to export the private keys corresponding to each of the MPCKeys under this DeviceGroup.",
        "operationId": "MPCKeyService_PrepareDeviceArchive",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/googlelongrunningOperation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "deviceGroupName",
            "description": "The resource name of the DeviceGroup. The prepared archive will include cryptographic materials to export the\nprivate keys corresponding to each of the MPCKey under this DeviceGroup.\nFormat: pools/{pool_id}/deviceGroups/{device_group_id}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "pools/[^/]+/deviceGroups/[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "device": {
                  "type": "string",
                  "title": "The resource name of the Device that prepares the archive in its local storage.\nThe Device must be part of the DeviceGroup specified above.\nFormat: devices/{device_id}"
                },
                "requestId": {
                  "type": "string",
                  "description": "A user-provided request ID to allow for idempotency. This should be a UUID."
                }
              },
              "description": "The request message for PrepareDeviceArchive.",
              "required": [
                "device"
              ]
            }
          }
        ],
        "tags": [
          "MPCKeyService"
        ]
      }
    },
    "/v1/{deviceGroupName}:prepareDeviceBackup": {
      "post": {
        "summary": "PrepareDeviceBackup",
        "description": "Prepares a backup in the given Device.\n\n The backup contains certain cryptographic materials that can be used to restore MPCKeys, which have the given DeviceGroup as their parent, on a new Device.\n\n The Device specified in the request must be a member of this DeviceGroup and must participate in the associated MPC operation for the backup to be prepared. \n\n After calling this RPC, use ListMPCOperations to poll for the pending PrepareDeviceBackup operation, and use the WaaS SDK's ComputeMPCOperation to complete the operation. \n\n Once the operation completes, the Device can utilize WaaS SDK to download the backup bundle. \n\n We recommend storing this backup bundle securely in a storage provider of your choice. \n\n If the user loses access to their existing Device and wants to recover MPCKeys in the given DeviceGroup on a new Device, use AddDevice RPC on the MPCKeyService.",
        "operationId": "MPCKeyService_PrepareDeviceBackup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/googlelongrunningOperation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "deviceGroupName",
            "description": "The resource name of the DeviceGroup. The prepared backup will include cryptographic materials to recover the\nMPCKeys under this DeviceGroup on a new Device.\nFormat: pools/{pool_id}/deviceGroups/{device_group_id}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "pools/[^/]+/deviceGroups/[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "device": {
                  "type": "string",
                  "title": "The resource name of the Device that prepares the backup.\nThe Device must be part of the DeviceGroup specified above.\nFormat: devices/{device_id}"
                },
                "requestId": {
                  "type": "string",
                  "description": "A user-provided request ID to allow for idempotency. This should be a UUID."
                }
              },
              "description": "The request message for PrepareDeviceBackup.",
              "required": [
                "device"
              ]
            }
          }
        ],
        "tags": [
          "MPCKeyService"
        ]
      }
    },
    "/v1/{deviceName}": {
      "get": {
        "summary": "GetDevice",
        "description": "Retrieves a Device by resource name.",
        "operationId": "MPCKeyService_GetDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Device"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "deviceName",
            "description": "The resource name of the Device.\nFormat: devices/{device_id}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "devices/[^/]+"
          }
        ],
        "tags": [
          "MPCKeyService"
        ]
      }
    },
    "/v1/{mpcKeyName}": {
      "get": {
        "summary": "GetMPCKey",
        "description": "Retrieves an MPCKey by resource name.",
        "operationId": "MPCKeyService_GetMPCKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MPCKey"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "mpcKeyName",
            "description": "The resource name of the MPCKey.\nFormat: pools/{pool_id}/deviceGroups/{device_group_id}/mpcKeys/{mpc_key_id}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "pools/[^/]+/deviceGroups/[^/]+/mpcKeys/[^/]+"
          }
        ],
        "tags": [
          "MPCKeyService"
        ]
      }
    },
    "/v1/{mpcKeyName}/signatures": {
      "post": {
        "summary": "CreateSignature",
        "description": "Creates a Signature using an MPCKey.\n\n After calling this, use ListMPCOperations to poll for the pending CreateSignature operation, and use the WaaS SDK's computeMPCOperation to complete the operation.",
        "operationId": "MPCKeyService_CreateSignature",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/googlelongrunningOperation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "mpcKeyName",
            "description": "The resource name of the parent MPCKey.\nFormat: pools/{pool_id}/deviceGroups/{device_group_id}/mpcKeys/{mpc_key_id}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "pools/[^/]+/deviceGroups/[^/]+/mpcKeys/[^/]+"
          },
          {
            "name": "signature",
            "description": "The Signature to be created.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cloudmpc_keysv1Signature",
              "required": [
                "signature"
              ]
            }
          },
          {
            "name": "requestId",
            "description": "A user-provided request ID to allow for idempotency. This should be a UUID.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MPCKeyService"
        ]
      }
    },
    "/v1/{poolName}/deviceGroups": {
      "post": {
        "summary": "CreateDeviceGroup",
        "description": "Creates a DeviceGroup. The DeviceGroup must contain exactly one registered Device, and the Seed in the DeviceGroup must have at least one HardenedChild.\n\n After calling this, use ListMPCOperations to poll for the pending CreateDeviceGroup operation, and use the WaaS SDK's ComputeMPCOperation to complete the operation.",
        "operationId": "MPCKeyService_CreateDeviceGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/googlelongrunningOperation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "poolName",
            "description": "The resource name of the parent Pool.\nFormat: pools/{pool_id}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "pools/[^/]+"
          },
          {
            "name": "deviceGroup",
            "description": "The DeviceGroup to be created. This must contain exactly one registered Device, and\nthe contained Seed must have at least one HardenedChild.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeviceGroup",
              "required": [
                "deviceGroup"
              ]
            }
          },
          {
            "name": "deviceGroupId",
            "description": "Optional: the ID to use for the DeviceGroup, which will become the final component\nof the DeviceGroup's resource name. If not provided, the server will assign a DeviceGroup ID\nautomatically.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "requestId",
            "description": "A user-provided request ID to allow for idempotency. This should be a UUID.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MPCKeyService"
        ]
      }
    }
  },
  "definitions": {
    "cloudmpc_keysv1Signature": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "pools/95257c5a-522f-4241-bf97-2656a8e9cc91/deviceGroups/3a168a54-6661-4e5a-8bc5-9759671aa777/mpcKeys/d28b946b-533b-466e-bb61-91d938743858/signatures/12960bf7-f215-44cf-8589-6b8a0fd9c42d",
          "description": "The resource name of the Signature.\nFormat: pools/{pool_id}/deviceGroups/{device_group_id}/mpcKeys/{mpc_key_id}/signatures/{signature_id}",
          "title": "name",
          "readOnly": true
        },
        "payload": {
          "type": "string",
          "format": "byte",
          "description": "The payload to sign with the MPCKey.",
          "title": "name"
        },
        "signature": {
          "$ref": "#/definitions/cryptotypesv1Signature",
          "description": "The payload which has been signed with the MPCKey.",
          "title": "signature",
          "readOnly": true
        }
      },
      "description": "The Signature resource. Signatures can be created with distributed M-of-N signing using MPCKeys via the WaaS SDK.",
      "title": "Signature",
      "required": [
        "payload"
      ]
    },
    "cryptotypesv1Signature": {
      "type": "object",
      "properties": {
        "ecdsaSignature": {
          "$ref": "#/definitions/v1ECDSASignature",
          "description": "An ECDSA signature."
        }
      },
      "description": "A digital signature produced by a signing algorithm."
    },
    "googlelongrunningOperation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should be a resource name ending with `operations/{unique_id}`."
        },
        "metadata": {
          "$ref": "#/definitions/protobufAny",
          "description": "Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any."
        },
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable."
        },
        "error": {
          "$ref": "#/definitions/rpcStatus",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "response": {
          "$ref": "#/definitions/protobufAny",
          "description": "The normal response of the operation in case of success.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`/`Create`/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`."
        }
      },
      "description": "This resource represents a long-running operation that is the result of a\nnetwork API call."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of\n[google.rpc.Code][google.rpc.Code]."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized\nby the client."
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "v1AddDeviceMetadata": {
      "type": "object",
      "properties": {
        "deviceGroup": {
          "type": "string",
          "example": "pools/95257c5a-522f-4241-bf97-2656a8e9cc91/deviceGroups/3a168a54-6661-4e5a-8bc5-9759671aa777",
          "description": "The resource name of the DeviceGroup to poll using ListMPCOperations.\n Format: pools/{pool_id}/deviceGroups/{device_group_id}",
          "title": "device_group",
          "readOnly": true
        },
        "participatingDevices": {
          "type": "array",
          "example": [
            "devices/1591089c-229d-4578-ab94-a3fa3442d77b"
          ],
          "items": {
            "type": "string"
          },
          "description": "The list of Device resource names that can compute the MPCOperation by invoking ComputeAddDeviceMPCOperation on the WaaS SDK.\nFormat: devices/{device}",
          "title": "devices",
          "readOnly": true
        }
      },
      "description": "Metadata associated with the AddDevice long-running operation."
    },
    "v1CreateDeviceGroupMetadata": {
      "type": "object",
      "properties": {
        "deviceGroup": {
          "type": "string",
          "example": "pools/95257c5a-522f-4241-bf97-2656a8e9cc91/deviceGroups/3a168a54-6661-4e5a-8bc5-9759671aa777",
          "description": "The resource name of the DeviceGroup to poll using ListMPCOperations.\n Format: pools/{pool_id}/deviceGroups/{device_group_id}",
          "title": "device_group",
          "readOnly": true
        }
      },
      "description": "Metadata associated with the CreateDeviceGroup long-running operation."
    },
    "v1CreateSignatureMetadata": {
      "type": "object",
      "properties": {
        "deviceGroup": {
          "type": "string",
          "example": "pools/95257c5a-522f-4241-bf97-2656a8e9cc91/deviceGroups/3a168a54-6661-4e5a-8bc5-9759671aa777",
          "description": "The resource name of the DeviceGroup to poll using ListMPCOperations.\n Format: pools/{pool_id}/deviceGroups/{device_group_id}",
          "title": "device_group",
          "readOnly": true
        },
        "payload": {
          "type": "string",
          "format": "byte",
          "description": "The payload that is about to be signed. Check this value to ensure that the\ncorrect payload is being signed."
        }
      },
      "description": "Metadata associated with the CreateSignature long-running operation.",
      "required": [
        "payload"
      ]
    },
    "v1Device": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "devices/1591089c-229d-4578-ab94-a3fa3442d77b",
          "description": "The resource name of the Device.\nFormat: devices/{device_id}",
          "title": "name",
          "readOnly": true
        }
      },
      "description": "The Device resource, which represents a single participant in the MPC protocol.",
      "title": "Device"
    },
    "v1DeviceGroup": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "pools/95257c5a-522f-4241-bf97-2656a8e9cc91/deviceGroups/3a168a54-6661-4e5a-8bc5-9759671aa777",
          "description": "The resource name of the DeviceGroup.\nFormat: pools/{pool_id}/deviceGroups/{device_group_id}",
          "title": "name",
          "readOnly": true
        },
        "devices": {
          "type": "array",
          "example": [
            "devices/1591089c-229d-4578-ab94-a3fa3442d77b"
          ],
          "items": {
            "type": "string"
          },
          "description": "The list of Device resource names associated with this DeviceGroup. On creation, this list must have exactly one Device set.\nFormat: devices/{device}",
          "title": "devices"
        },
        "seed": {
          "$ref": "#/definitions/v1Seed",
          "description": "The Seed that corresponds to the DeviceGroup. On creation, the Seed must have at least one HardenedChild set.",
          "title": "seed"
        }
      },
      "description": "The DeviceGroup resource, which represents a collection of Devices that have access to the same set of Seed resources.",
      "title": "DeviceGroup",
      "required": [
        "devices",
        "seed"
      ]
    },
    "v1ECDSASignature": {
      "type": "object",
      "properties": {
        "r": {
          "type": "string",
          "format": "byte",
          "description": "The 32-byte R value of the signature in big-endian order."
        },
        "s": {
          "type": "string",
          "format": "byte",
          "description": "The 32-byte S value of the signature in big-endian order."
        },
        "v": {
          "type": "integer",
          "format": "int32",
          "description": "The V value of the signature, if it exists."
        }
      },
      "description": "A digital signature produced by the elliptic curve digital signature algorithm (ECDSA)."
    },
    "v1EllipticCurve": {
      "type": "string",
      "enum": [
        "ELLIPTIC_CURVE_UNSPECIFIED",
        "SECP256K1"
      ],
      "default": "ELLIPTIC_CURVE_UNSPECIFIED",
      "description": "An enumeration of supported elliptic curve types.\n\n - ELLIPTIC_CURVE_UNSPECIFIED: The default unspecified value.\n - SECP256K1: The curve used by Bitcoin and Ethereum."
    },
    "v1EllipticPublicKey": {
      "type": "object",
      "properties": {
        "ellipticCurve": {
          "$ref": "#/definitions/v1EllipticCurve",
          "description": "The elliptic curve used by this public key."
        },
        "publicKey": {
          "type": "string",
          "format": "byte",
          "description": "The public key in compressed form as defined in the Standards for Efficient\nCryptography (SEC) 1, Version 2.0, Section 2.3.3."
        }
      },
      "description": "An Elliptic Curve Cryptography (ECC) public key."
    },
    "v1HardenedChild": {
      "type": "object",
      "properties": {
        "derivationPath": {
          "type": "array",
          "example": "[44, 60, 0]",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "description": "The derivation path to reach the hardened child from the Seed (i.e., the root of the HD tree).Each integer in the derivation path is interpreted according to BIP-44: m / purpose’ / coin_type’ / account’ / change / address_index.",
          "title": "name"
        }
      },
      "description": "A child of a Seed in an HD tree that was produced using hardened derivation, as defined in BIP-32. All MPCKeys descend from a HardenedChild.",
      "title": "HardenedChild",
      "required": [
        "derivationPath"
      ]
    },
    "v1ListMPCOperationsResponse": {
      "type": "object",
      "properties": {
        "mpcOperations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MPCOperation"
          },
          "description": "The list of MPCOperations."
        }
      },
      "description": "The response message for ListMPCOperations.",
      "title": "ListMPCOperationsResponse"
    },
    "v1MPCKey": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "pools/95257c5a-522f-4241-bf97-2656a8e9cc91/deviceGroups/3a168a54-6661-4e5a-8bc5-9759671aa777/mpcKeys/d28b946b-533b-466e-bb61-91d938743858",
          "description": "The resource name of the MPCKey.\nFormat: pools/{pool_id}/deviceGroups/{device_group_id}/mpcKeys/{mpc_key_id}",
          "title": "name",
          "readOnly": true
        },
        "derivationPath": {
          "type": "array",
          "example": [
            44,
            60,
            0,
            0,
            0
          ],
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "description": "The derivation path to reach this MPCKey from the Seed (i.e., the root of the HD tree). There must be a HardenedChild in the Seed of the parent DeviceGroup which is a prefix of this derivation path. Each integer in the derivation path is interpreted according to BIP-44: m / purpose’ / coin_type’ / account’ / change / address_index.",
          "title": "derivationPath"
        },
        "publicKey": {
          "$ref": "#/definitions/v1PublicKey",
          "description": "The public portion of the MPCKey.",
          "title": "publicKey",
          "readOnly": true
        }
      },
      "description": "The MPCKey resource. An MPCKey can be used to participate in distributed M-of-N signing via the WaaS SDK. An MPCKey is created from a Seed.",
      "title": "MPCKey",
      "required": [
        "derivationPath"
      ]
    },
    "v1MPCOperation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "pools/95257c5a-522f-4241-bf97-2656a8e9cc91/deviceGroups/3a168a54-6661-4e5a-8bc5-9759671aa777/mpcOperations/12885154-8d6e-4060-8ade-5b2b3d919317",
          "description": "The resource name of the MPCOperation.\nFormat: pools/{pool_id}/deviceGroups/{device_group_id}/mpcOperations/{mpc_operation_id}",
          "title": "name",
          "readOnly": true
        },
        "mpcData": {
          "type": "string",
          "format": "byte",
          "description": "Data that should be passed to the WaaS SDK's computeMPCOperation function to complete the operation.",
          "title": "mpcData",
          "readOnly": true
        },
        "createDeviceGroupMetadata": {
          "$ref": "#/definitions/v1CreateDeviceGroupMetadata",
          "description": "Metadata associated with the CreateDeviceGroup long-running operation.",
          "title": "createDeviceGroupMetadata"
        },
        "createSignatureMetadata": {
          "$ref": "#/definitions/v1CreateSignatureMetadata",
          "description": "Metadata associated with the CreateSignature long-running operation.",
          "title": "createSignatureMetadata"
        },
        "prepareDeviceArchiveMetadata": {
          "$ref": "#/definitions/v1PrepareDeviceArchiveMetadata",
          "description": "Metadata associated with the PrepareDeviceArchive long-running operation.",
          "title": "prepareDeviceArchiveMetadata"
        },
        "prepareDeviceBackupMetadata": {
          "$ref": "#/definitions/v1PrepareDeviceBackupMetadata",
          "description": "Metadata associated with the PrepareDeviceBackup long-running operation.",
          "title": "prepareDeviceBackupMetadata"
        },
        "addDeviceMetadata": {
          "$ref": "#/definitions/v1AddDeviceMetadata",
          "description": "Metadata associated with the AddDevice long-running operation.",
          "title": "addDeviceMetadata"
        }
      },
      "description": "The MPCOperation resource, which represents a pending MPC operation of a DeviceGroup waiting for computation. Poll the ListMPCOperations method for these pending MPCOperations, and use the WaaS SDK's ComputeMPCOperation to complete the operation. The MPCOperation resource ID is guaranteed to be the same as that of the underlying long-running operation.",
      "title": "MPCOperation"
    },
    "v1PrepareDeviceArchiveMetadata": {
      "type": "object",
      "properties": {
        "deviceGroup": {
          "type": "string",
          "example": "pools/95257c5a-522f-4241-bf97-2656a8e9cc91/deviceGroups/3a168a54-6661-4e5a-8bc5-9759671aa777",
          "description": "The resource name of the DeviceGroup to poll using ListMPCOperations.\n Format: pools/{pool_id}/deviceGroups/{device_group_id}",
          "title": "device_group",
          "readOnly": true
        }
      },
      "description": "Metadata associated with the PrepareDeviceArchive long-running operation."
    },
    "v1PrepareDeviceBackupMetadata": {
      "type": "object",
      "properties": {
        "deviceGroup": {
          "type": "string",
          "example": "pools/95257c5a-522f-4241-bf97-2656a8e9cc91/deviceGroups/3a168a54-6661-4e5a-8bc5-9759671aa777",
          "description": "The resource name of the DeviceGroup to poll using ListMPCOperations.\n Format: pools/{pool_id}/deviceGroups/{device_group_id}",
          "title": "device_group",
          "readOnly": true
        }
      },
      "description": "Metadata associated with the PrepareDeviceBackup long-running operation."
    },
    "v1PublicKey": {
      "type": "object",
      "properties": {
        "ellipticPublicKey": {
          "$ref": "#/definitions/v1EllipticPublicKey",
          "description": "An Elliptic Curve Cryptography (ECC) public key."
        }
      },
      "description": "A message representing a public key."
    },
    "v1RegisterDeviceRequest": {
      "type": "object",
      "properties": {
        "registrationData": {
          "type": "string",
          "format": "byte",
          "description": "Data required to register the Device. This should be gotten from the WaaS SDK's\ngetRegistrationData method."
        },
        "requestId": {
          "type": "string",
          "description": "A user-provided request ID to allow for idempotency. This should be a UUID."
        }
      },
      "description": "The request message for RegisterDevice.",
      "required": [
        "registrationData"
      ]
    },
    "v1RevokeDeviceRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The resource name of the Device that is being revoked.\nFormat: devices/{device_id}"
        }
      },
      "description": "The request message for RevokeDevice.",
      "required": [
        "name"
      ]
    },
    "v1Seed": {
      "type": "object",
      "properties": {
        "hardenedChildren": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1HardenedChild"
          },
          "description": "The hardened children derived from the Seed. To create an MPCKey, at least one hardened child must be derived.",
          "title": "hardenedChildren"
        },
        "mpcKeyExportMetadata": {
          "type": "string",
          "format": "byte",
          "description": "The metadata to be used to export MPCKeys derived from this Seed.\n\n This metadata has to be passed to WaaS SDK's ExportPrivateKeys to export private keys corresponding to MPCKeys that are derived from this Seed's HardenedChildren.",
          "title": "mpcKeyExportMetadata",
          "readOnly": true
        }
      },
      "description": "A byte sequence at the root of a hierarchically deterministic (HD) wallet as defined in BIP-32. A DeviceGroup has exactly one Seed.",
      "title": "Seed",
      "required": [
        "hardenedChildren"
      ]
    }
  }
}
