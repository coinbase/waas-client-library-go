// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	gax "github.com/googleapis/gax-go/v2"
	mock "github.com/stretchr/testify/mock"

	mpc_transactionsv1 "github.com/coinbase/waas-client-library-go/gen/go/coinbase/cloud/mpc_transactions/v1"
)

// ClientWrappedCreateMPCTransactionOperation is an autogenerated mock type for the ClientWrappedCreateMPCTransactionOperation type
type ClientWrappedCreateMPCTransactionOperation struct {
	mock.Mock
}

// Done provides a mock function with given fields:
func (_m *ClientWrappedCreateMPCTransactionOperation) Done() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Metadata provides a mock function with given fields:
func (_m *ClientWrappedCreateMPCTransactionOperation) Metadata() (*mpc_transactionsv1.CreateMPCTransactionMetadata, error) {
	ret := _m.Called()

	var r0 *mpc_transactionsv1.CreateMPCTransactionMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func() (*mpc_transactionsv1.CreateMPCTransactionMetadata, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *mpc_transactionsv1.CreateMPCTransactionMetadata); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpc_transactionsv1.CreateMPCTransactionMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Name provides a mock function with given fields:
func (_m *ClientWrappedCreateMPCTransactionOperation) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PathPrefix provides a mock function with given fields:
func (_m *ClientWrappedCreateMPCTransactionOperation) PathPrefix() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Poll provides a mock function with given fields: ctx, opts
func (_m *ClientWrappedCreateMPCTransactionOperation) Poll(ctx context.Context, opts ...gax.CallOption) (*mpc_transactionsv1.MPCTransaction, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mpc_transactionsv1.MPCTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...gax.CallOption) (*mpc_transactionsv1.MPCTransaction, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...gax.CallOption) *mpc_transactionsv1.MPCTransaction); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpc_transactionsv1.MPCTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...gax.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Wait provides a mock function with given fields: ctx, opts
func (_m *ClientWrappedCreateMPCTransactionOperation) Wait(ctx context.Context, opts ...gax.CallOption) (*mpc_transactionsv1.MPCTransaction, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mpc_transactionsv1.MPCTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...gax.CallOption) (*mpc_transactionsv1.MPCTransaction, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...gax.CallOption) *mpc_transactionsv1.MPCTransaction); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpc_transactionsv1.MPCTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...gax.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientWrappedCreateMPCTransactionOperation creates a new instance of ClientWrappedCreateMPCTransactionOperation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientWrappedCreateMPCTransactionOperation(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientWrappedCreateMPCTransactionOperation {
	mock := &ClientWrappedCreateMPCTransactionOperation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
