// Code generated by protoc-gen-go-aip. DO NOT EDIT.
//
// versions:
// 	protoc-gen-go-aip development
// 	protoc (unknown)
// source: coinbase/cloud/blockchain/v1/blockchain.proto

package v1

import (
	fmt "fmt"
	resourcename "go.einride.tech/aip/resourcename"
	strings "strings"
)

type NetworkResourceName struct {
	Network string
}

func (n NetworkResourceName) Validate() error {
	if n.Network == "" {
		return fmt.Errorf("network: empty")
	}
	if strings.IndexByte(n.Network, '/') != -1 {
		return fmt.Errorf("network: contains illegal character '/'")
	}
	return nil
}

func (n NetworkResourceName) ContainsWildcard() bool {
	return false || n.Network == "-"
}

func (n NetworkResourceName) String() string {
	return resourcename.Sprint(
		"networks/{network}",
		n.Network,
	)
}

func (n NetworkResourceName) MarshalString() (string, error) {
	if err := n.Validate(); err != nil {
		return "", err
	}
	return n.String(), nil
}

func (n *NetworkResourceName) UnmarshalString(name string) error {
	return resourcename.Sscan(
		name,
		"networks/{network}",
		&n.Network,
	)
}

type AssetResourceName struct {
	Network string
	Asset   string
}

func (n NetworkResourceName) AssetResourceName(
	asset string,
) AssetResourceName {
	return AssetResourceName{
		Network: n.Network,
		Asset:   asset,
	}
}

func (n AssetResourceName) Validate() error {
	if n.Network == "" {
		return fmt.Errorf("network: empty")
	}
	if strings.IndexByte(n.Network, '/') != -1 {
		return fmt.Errorf("network: contains illegal character '/'")
	}
	if n.Asset == "" {
		return fmt.Errorf("asset: empty")
	}
	if strings.IndexByte(n.Asset, '/') != -1 {
		return fmt.Errorf("asset: contains illegal character '/'")
	}
	return nil
}

func (n AssetResourceName) ContainsWildcard() bool {
	return false || n.Network == "-" || n.Asset == "-"
}

func (n AssetResourceName) String() string {
	return resourcename.Sprint(
		"networks/{network}/assets/{asset}",
		n.Network,
		n.Asset,
	)
}

func (n AssetResourceName) MarshalString() (string, error) {
	if err := n.Validate(); err != nil {
		return "", err
	}
	return n.String(), nil
}

func (n *AssetResourceName) UnmarshalString(name string) error {
	return resourcename.Sscan(
		name,
		"networks/{network}/assets/{asset}",
		&n.Network,
		&n.Asset,
	)
}

func (n AssetResourceName) NetworkResourceName() NetworkResourceName {
	return NetworkResourceName{
		Network: n.Network,
	}
}
