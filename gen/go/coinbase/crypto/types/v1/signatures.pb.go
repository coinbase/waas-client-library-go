// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: coinbase/crypto/types/v1/signatures.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A digital signature produced by a signing algorithm.
type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The signature contents.
	//
	// Types that are assignable to Signature:
	//	*Signature_EcdsaSignature
	Signature isSignature_Signature `protobuf_oneof:"signature"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_crypto_types_v1_signatures_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_crypto_types_v1_signatures_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_coinbase_crypto_types_v1_signatures_proto_rawDescGZIP(), []int{0}
}

func (m *Signature) GetSignature() isSignature_Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (x *Signature) GetEcdsaSignature() *ECDSASignature {
	if x, ok := x.GetSignature().(*Signature_EcdsaSignature); ok {
		return x.EcdsaSignature
	}
	return nil
}

type isSignature_Signature interface {
	isSignature_Signature()
}

type Signature_EcdsaSignature struct {
	// An ECDSA signature.
	EcdsaSignature *ECDSASignature `protobuf:"bytes,1,opt,name=ecdsa_signature,json=ecdsaSignature,proto3,oneof"`
}

func (*Signature_EcdsaSignature) isSignature_Signature() {}

// A digital signature produced by the elliptic curve digital signature algorithm (ECDSA).
type ECDSASignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The 32-byte R value of the signature in big-endian order.
	R []byte `protobuf:"bytes,1,opt,name=r,proto3" json:"r,omitempty"`
	// The 32-byte S value of the signature in big-endian order.
	S []byte `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
	// The V value of the signature, if it exists.
	V int32 `protobuf:"varint,3,opt,name=v,proto3" json:"v,omitempty"`
}

func (x *ECDSASignature) Reset() {
	*x = ECDSASignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_crypto_types_v1_signatures_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECDSASignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECDSASignature) ProtoMessage() {}

func (x *ECDSASignature) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_crypto_types_v1_signatures_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECDSASignature.ProtoReflect.Descriptor instead.
func (*ECDSASignature) Descriptor() ([]byte, []int) {
	return file_coinbase_crypto_types_v1_signatures_proto_rawDescGZIP(), []int{1}
}

func (x *ECDSASignature) GetR() []byte {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *ECDSASignature) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *ECDSASignature) GetV() int32 {
	if x != nil {
		return x.V
	}
	return 0
}

var File_coinbase_crypto_types_v1_signatures_proto protoreflect.FileDescriptor

var file_coinbase_crypto_types_v1_signatures_proto_rawDesc = []byte{
	0x0a, 0x29, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x22, 0x6d, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x53, 0x0a, 0x0f, 0x65, 0x63, 0x64, 0x73, 0x61, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x43, 0x44, 0x53, 0x41, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x63, 0x64, 0x73, 0x61, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0x3a, 0x0a, 0x0e, 0x45, 0x43, 0x44, 0x53, 0x41, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x01, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x76,
	0x42, 0x4c, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x77, 0x61, 0x61, 0x73, 0x2d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2d, 0x67, 0x6f, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_coinbase_crypto_types_v1_signatures_proto_rawDescOnce sync.Once
	file_coinbase_crypto_types_v1_signatures_proto_rawDescData = file_coinbase_crypto_types_v1_signatures_proto_rawDesc
)

func file_coinbase_crypto_types_v1_signatures_proto_rawDescGZIP() []byte {
	file_coinbase_crypto_types_v1_signatures_proto_rawDescOnce.Do(func() {
		file_coinbase_crypto_types_v1_signatures_proto_rawDescData = protoimpl.X.CompressGZIP(file_coinbase_crypto_types_v1_signatures_proto_rawDescData)
	})
	return file_coinbase_crypto_types_v1_signatures_proto_rawDescData
}

var file_coinbase_crypto_types_v1_signatures_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_coinbase_crypto_types_v1_signatures_proto_goTypes = []interface{}{
	(*Signature)(nil),      // 0: coinbase.crypto.types.v1.Signature
	(*ECDSASignature)(nil), // 1: coinbase.crypto.types.v1.ECDSASignature
}
var file_coinbase_crypto_types_v1_signatures_proto_depIdxs = []int32{
	1, // 0: coinbase.crypto.types.v1.Signature.ecdsa_signature:type_name -> coinbase.crypto.types.v1.ECDSASignature
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_coinbase_crypto_types_v1_signatures_proto_init() }
func file_coinbase_crypto_types_v1_signatures_proto_init() {
	if File_coinbase_crypto_types_v1_signatures_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_coinbase_crypto_types_v1_signatures_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_crypto_types_v1_signatures_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECDSASignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_coinbase_crypto_types_v1_signatures_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Signature_EcdsaSignature)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coinbase_crypto_types_v1_signatures_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_coinbase_crypto_types_v1_signatures_proto_goTypes,
		DependencyIndexes: file_coinbase_crypto_types_v1_signatures_proto_depIdxs,
		MessageInfos:      file_coinbase_crypto_types_v1_signatures_proto_msgTypes,
	}.Build()
	File_coinbase_crypto_types_v1_signatures_proto = out.File
	file_coinbase_crypto_types_v1_signatures_proto_rawDesc = nil
	file_coinbase_crypto_types_v1_signatures_proto_goTypes = nil
	file_coinbase_crypto_types_v1_signatures_proto_depIdxs = nil
}
