// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	iterator "google.golang.org/api/iterator"

	v1 "github.com/coinbase/waas-client-library-go/gen/go/coinbase/cloud/blockchain/v1"
)

// AssetIterator is an autogenerated mock type for the AssetIterator type
type AssetIterator struct {
	mock.Mock
}

// Next provides a mock function with given fields:
func (_m *AssetIterator) Next() (*v1.Asset, error) {
	ret := _m.Called()

	var r0 *v1.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func() (*v1.Asset, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *v1.Asset); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Asset)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PageInfo provides a mock function with given fields:
func (_m *AssetIterator) PageInfo() *iterator.PageInfo {
	ret := _m.Called()

	var r0 *iterator.PageInfo
	if rf, ok := ret.Get(0).(func() *iterator.PageInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iterator.PageInfo)
		}
	}

	return r0
}

// Response provides a mock function with given fields:
func (_m *AssetIterator) Response() *v1.ListAssetsResponse {
	ret := _m.Called()

	var r0 *v1.ListAssetsResponse
	if rf, ok := ret.Get(0).(func() *v1.ListAssetsResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ListAssetsResponse)
		}
	}

	return r0
}

// NewAssetIterator creates a new instance of AssetIterator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssetIterator(t interface {
	mock.TestingT
	Cleanup(func())
}) *AssetIterator {
	mock := &AssetIterator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
