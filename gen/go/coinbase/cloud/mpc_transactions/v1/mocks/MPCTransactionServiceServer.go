// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	mock "github.com/stretchr/testify/mock"

	v1 "github.com/coinbase/waas-client-library-go/gen/go/coinbase/cloud/mpc_transactions/v1"
)

// MPCTransactionServiceServer is an autogenerated mock type for the MPCTransactionServiceServer type
type MPCTransactionServiceServer struct {
	mock.Mock
}

// CreateMPCTransaction provides a mock function with given fields: _a0, _a1
func (_m *MPCTransactionServiceServer) CreateMPCTransaction(_a0 context.Context, _a1 *v1.CreateMPCTransactionRequest) (*longrunningpb.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *longrunningpb.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateMPCTransactionRequest) (*longrunningpb.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateMPCTransactionRequest) *longrunningpb.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*longrunningpb.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.CreateMPCTransactionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMPCTransaction provides a mock function with given fields: _a0, _a1
func (_m *MPCTransactionServiceServer) GetMPCTransaction(_a0 context.Context, _a1 *v1.GetMPCTransactionRequest) (*v1.MPCTransaction, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.MPCTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetMPCTransactionRequest) (*v1.MPCTransaction, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetMPCTransactionRequest) *v1.MPCTransaction); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.MPCTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.GetMPCTransactionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMPCTransactions provides a mock function with given fields: _a0, _a1
func (_m *MPCTransactionServiceServer) ListMPCTransactions(_a0 context.Context, _a1 *v1.ListMPCTransactionsRequest) (*v1.ListMPCTransactionsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.ListMPCTransactionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ListMPCTransactionsRequest) (*v1.ListMPCTransactionsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ListMPCTransactionsRequest) *v1.ListMPCTransactionsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ListMPCTransactionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.ListMPCTransactionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedMPCTransactionServiceServer provides a mock function with given fields:
func (_m *MPCTransactionServiceServer) mustEmbedUnimplementedMPCTransactionServiceServer() {
	_m.Called()
}

// NewMPCTransactionServiceServer creates a new instance of MPCTransactionServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMPCTransactionServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MPCTransactionServiceServer {
	mock := &MPCTransactionServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
