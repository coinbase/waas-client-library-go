// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: coinbase/cloud/types/transfer.proto

package types

import (
	ethereum "github.cbhq.net/cloud/waas-client-library-go/gen/go/coinbase/cloud/protocols/ethereum"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A message representing the fee to be paid for an asset transfer.
type TransferFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The fee to be paid.
	//
	// Types that are assignable to Fee:
	//	*TransferFee_EthereumFee
	Fee isTransferFee_Fee `protobuf_oneof:"fee"`
}

func (x *TransferFee) Reset() {
	*x = TransferFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_cloud_types_transfer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferFee) ProtoMessage() {}

func (x *TransferFee) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_cloud_types_transfer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferFee.ProtoReflect.Descriptor instead.
func (*TransferFee) Descriptor() ([]byte, []int) {
	return file_coinbase_cloud_types_transfer_proto_rawDescGZIP(), []int{0}
}

func (m *TransferFee) GetFee() isTransferFee_Fee {
	if m != nil {
		return m.Fee
	}
	return nil
}

func (x *TransferFee) GetEthereumFee() *ethereum.DynamicFeeInput {
	if x, ok := x.GetFee().(*TransferFee_EthereumFee); ok {
		return x.EthereumFee
	}
	return nil
}

type isTransferFee_Fee interface {
	isTransferFee_Fee()
}

type TransferFee_EthereumFee struct {
	// An EIP-1559 fee on EVM networks.
	EthereumFee *ethereum.DynamicFeeInput `protobuf:"bytes,1,opt,name=ethereum_fee,json=ethereumFee,proto3,oneof"`
}

func (*TransferFee_EthereumFee) isTransferFee_Fee() {}

var File_coinbase_cloud_types_transfer_proto protoreflect.FileDescriptor

var file_coinbase_cloud_types_transfer_proto_rawDesc = []byte{
	0x0a, 0x23, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6d, 0x0a, 0x0b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46, 0x65, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x46, 0x65, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x42, 0x4a, 0x5a, 0x48, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x62, 0x68, 0x71, 0x2e, 0x6e, 0x65, 0x74, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x77, 0x61, 0x61, 0x73, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67,
	0x6f, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_coinbase_cloud_types_transfer_proto_rawDescOnce sync.Once
	file_coinbase_cloud_types_transfer_proto_rawDescData = file_coinbase_cloud_types_transfer_proto_rawDesc
)

func file_coinbase_cloud_types_transfer_proto_rawDescGZIP() []byte {
	file_coinbase_cloud_types_transfer_proto_rawDescOnce.Do(func() {
		file_coinbase_cloud_types_transfer_proto_rawDescData = protoimpl.X.CompressGZIP(file_coinbase_cloud_types_transfer_proto_rawDescData)
	})
	return file_coinbase_cloud_types_transfer_proto_rawDescData
}

var file_coinbase_cloud_types_transfer_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_coinbase_cloud_types_transfer_proto_goTypes = []interface{}{
	(*TransferFee)(nil),              // 0: coinbase.cloud.types.TransferFee
	(*ethereum.DynamicFeeInput)(nil), // 1: coinbase.cloud.protocols.ethereum.DynamicFeeInput
}
var file_coinbase_cloud_types_transfer_proto_depIdxs = []int32{
	1, // 0: coinbase.cloud.types.TransferFee.ethereum_fee:type_name -> coinbase.cloud.protocols.ethereum.DynamicFeeInput
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_coinbase_cloud_types_transfer_proto_init() }
func file_coinbase_cloud_types_transfer_proto_init() {
	if File_coinbase_cloud_types_transfer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_coinbase_cloud_types_transfer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_coinbase_cloud_types_transfer_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*TransferFee_EthereumFee)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coinbase_cloud_types_transfer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_coinbase_cloud_types_transfer_proto_goTypes,
		DependencyIndexes: file_coinbase_cloud_types_transfer_proto_depIdxs,
		MessageInfos:      file_coinbase_cloud_types_transfer_proto_msgTypes,
	}.Build()
	File_coinbase_cloud_types_transfer_proto = out.File
	file_coinbase_cloud_types_transfer_proto_rawDesc = nil
	file_coinbase_cloud_types_transfer_proto_goTypes = nil
	file_coinbase_cloud_types_transfer_proto_depIdxs = nil
}
