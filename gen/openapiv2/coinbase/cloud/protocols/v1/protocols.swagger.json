{
  "swagger": "2.0",
  "info": {
    "title": "Protocols API",
    "version": "1.0"
  },
  "tags": [
    {
      "name": "ProtocolService",
      "description": "A service providing a set of stateless APIs for constructing and broadcasting Network-specific transactions."
    }
  ],
  "host": "api.developer.coinbase.com/waas/protocols",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/{networkName}:broadcastTransaction": {
      "post": {
        "summary": "BroadcastTransaction",
        "description": "Broadcasts a transaction to a node in the Network. There are two ways of invoking this API:\n 1. Set the raw_signed_transaction on the Transaction. This is equivalent to the payload used to broadcast transactions via block explorers such as Etherscan. In this case, the TransactionInput does not need to be set on the Transaction.\n 2. Set the signature(s) in the required_signatures of the Transaction. In this case, the TransactionInput must also be set on the Transaction.\n The Transaction returned will have the hash set on it.",
        "operationId": "ProtocolService_BroadcastTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Transaction"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "networkName",
            "description": "The resource name of the Network.\nFormat: networks/{network_id}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "networks/[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "transaction": {
                  "$ref": "#/definitions/v1Transaction",
                  "description": "The transaction to broadcast. For the broadcast to complete successfully, one of the following must be true:\n1. The raw_signed_transaction on the Transaction is populated. This is equivalent to the payload\nused to broadcast transactions via block explorers such as Etherscan.\n2. The signature(s) in the required_signatures of the Transaction is populated."
                }
              },
              "description": "The request message for BroadcastTransaction. For the broadcast to complete successfully,\none of the following must be true:\n1. The raw_signed_transaction on the Transaction is populated. This is equivalent to the payload\nused to broadcast transactions via block explorers such as Etherscan.\n2. The signature(s) in the required_signatures of the Transaction is populated.\nThe TransactionInput itself is not required."
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/v1/{networkName}:constructTransaction": {
      "post": {
        "summary": "ConstructTransaction",
        "description": "Constructs an unsigned transaction. The payloads in the required_signatures of the returned Transaction must be signed before the Transaction is broadcast.",
        "operationId": "ProtocolService_ConstructTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Transaction"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "networkName",
            "description": "The resource name of the Network.\nFormat: networks/{network_id}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "networks/[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "input": {
                  "$ref": "#/definitions/v1TransactionInput",
                  "description": "The input indicating the unsigned transaction to construct."
                }
              },
              "description": "The request message for ConstructTransaction."
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/v1/{networkName}:constructTransferTransaction": {
      "post": {
        "summary": "ConstructTransferTransaction",
        "description": "Constructs an unsigned transfer transaction. A transfer transaction is a transaction that moves an Asset from one Address to another.\n\nThe payloads in the required_signatures of the returned Transaction must be signed before the Transaction is broadcast.",
        "operationId": "ProtocolService_ConstructTransferTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Transaction"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "networkName",
            "description": "The resource name of the Network on which the transfer is happening.\nFormat: networks/{network_id}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "networks/[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "asset": {
                  "type": "string",
                  "description": "The resource name of the Asset being transferred.\nFormat: networks/{network_id}/assets/{asset_id}."
                },
                "sender": {
                  "type": "string",
                  "description": "The address of the sender, e.g. as a 0x-prefixed hex string."
                },
                "recipient": {
                  "type": "string",
                  "description": "The address of the recipient, e.g. as a 0x-prefixed hex string."
                },
                "amount": {
                  "type": "string",
                  "description": "The amount of the asset to transfer, denominated in atomic units of the asset (e.g. Wei),\neither as a \"0x\"-prefixed hex string or a base-10 number."
                },
                "nonce": {
                  "type": "string",
                  "format": "int64",
                  "description": "The nonce of the from address to be used in transaction construction.\nThis is required only for Account-based networks (e.g. EVM)."
                },
                "fee": {
                  "$ref": "#/definitions/v1TransactionFee",
                  "description": "The fee to be paid for the transfer. If not provided, the API will default to a network-based fee estimate."
                },
                "assetDefinition": {
                  "$ref": "#/definitions/AssetDefinition",
                  "description": "The Definition of the BlockchainService Asset for which the transfer transaction is being constructed.\nSupplying an Asset Definition is not strictly necessary for constructing transfer transactions for a native Asset\nor an ERC-20.\nFor an ERC-721, an Asset Definition with a sub_group_id must be provided to specify the token being transferred.\nFor an ERC-1155, an Asset Definition with a sub_group_id must be provided to specify the token being transferred."
                }
              },
              "description": "The request message for ConstructTransferTransaction.",
              "required": [
                "asset",
                "sender",
                "recipient",
                "amount"
              ]
            }
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    },
    "/v1/{networkName}:estimateFee": {
      "get": {
        "summary": "EstimateFee",
        "description": "Estimates the current network fee for the specified Network. For EVM Networks, this corresponds to the gas_price, max_fee_per_gas, and max_priority_fee_per_gas.",
        "operationId": "ProtocolService_EstimateFee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1EstimateFeeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "networkName",
            "description": "The resource name of the Network.\nFormat: networks/{network_id}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "networks/[^/]+"
          }
        ],
        "tags": [
          "ProtocolService"
        ]
      }
    }
  },
  "definitions": {
    "AssetDefinition": {
      "type": "object",
      "properties": {
        "assetType": {
          "type": "string",
          "example": "native",
          "description": "The type of Asset the definition describes.\nPossible values: 'native', 'erc20', 'erc721', 'erc1155'",
          "title": "assetType"
        },
        "assetGroupId": {
          "type": "string",
          "example": "0x887CFe31C888EE0780795b7feFF46CE7f9AB556C",
          "description": "The identifier that distinguishes this Asset group.\nGenerally a 0x-prefixed contract address for the Asset. For a native Asset this is not set.",
          "title": "assetGroupId"
        },
        "subGroupId": {
          "type": "string",
          "description": "The identifier that distinguishes the specific Asset within the asset group.\nGenerally a token ID. For a native Asset or ERC-20 this is not set.",
          "title": "subGroupId"
        }
      },
      "description": "The defining characteristics that combine to uniquely identify an Asset on-chain.\nFungible tokens, such as ERC-20s, require an asset_group_id (the contract address).\nNon-fungible tokens and multi-token assets such as ERC-721s and ERC-1155s require a both an asset_group_id and a sub_group_id (the token ID).",
      "title": "Asset.Definition"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1DynamicFeeInput": {
      "type": "object",
      "properties": {
        "maxPriorityFeePerGas": {
          "type": "string",
          "description": "The EIP-1559 maximum priority fee per gas either as a \"0x\"-prefixed hex string or a base-10 number."
        },
        "maxFeePerGas": {
          "type": "string",
          "description": "The EIP-1559 maximum fee per gas either as a \"0x\"-prefixed hex string or a base-10 number."
        }
      },
      "description": "A message representing fee information on EIP-1559 supported networks."
    },
    "v1ECDSASignature": {
      "type": "object",
      "properties": {
        "r": {
          "type": "string",
          "format": "byte",
          "description": "The 32-byte R value of the signature in big-endian order."
        },
        "s": {
          "type": "string",
          "format": "byte",
          "description": "The 32-byte S value of the signature in big-endian order."
        },
        "v": {
          "type": "integer",
          "format": "int32",
          "description": "The V value of the signature, if it exists."
        }
      },
      "description": "A digital signature produced by the elliptic curve digital signature algorithm (ECDSA)."
    },
    "v1EIP1559TransactionInput": {
      "type": "object",
      "properties": {
        "chainId": {
          "type": "string",
          "description": "The chain ID of the transaction either as a \"0x\"-prefixed hex string or a base-10 number."
        },
        "nonce": {
          "type": "string",
          "format": "uint64",
          "description": "The nonce of the transaction. This value may be ignored depending on the API."
        },
        "maxPriorityFeePerGas": {
          "type": "string",
          "description": "The EIP-1559 maximum priority fee per gas either as a \"0x\"-prefixed hex string or a base-10 number."
        },
        "maxFeePerGas": {
          "type": "string",
          "description": "The EIP-1559 maximum fee per gas either as a \"0x\"-prefixed hex string or a base-10 number."
        },
        "gas": {
          "type": "string",
          "format": "uint64",
          "description": "The maximum amount of gas to use on the transaction."
        },
        "fromAddress": {
          "type": "string",
          "description": "The checksummed address from which the transaction will originate, as a \"0x\"-prefixed hex string.\nNote: This is NOT a WaaS Address resource of the form\nnetworks/{networkID}/addresses/{addressID}."
        },
        "toAddress": {
          "type": "string",
          "description": "The checksummed address to which the transaction is addressed, as a \"0x\"-prefixed hex string.\nNote: This is NOT a WaaS Address resource of the form\nnetworks/{networkID}/addresses/{addressID}."
        },
        "value": {
          "type": "string",
          "description": "The native value of the transaction as a \"0x\"-prefixed hex string or a base-10 number."
        },
        "data": {
          "type": "string",
          "format": "byte",
          "description": "The data for the transaction."
        }
      },
      "description": "A message representing an EIP-1559 transaction input."
    },
    "v1EstimateFeeResponse": {
      "type": "object",
      "properties": {
        "ethereumFeeEstimate": {
          "$ref": "#/definitions/v1FeeEstimate",
          "description": "The estimated network fee for the given EVM Network."
        }
      },
      "description": "The response message for EstimateFee."
    },
    "v1FeeEstimate": {
      "type": "object",
      "properties": {
        "gasPrice": {
          "type": "string",
          "description": "The estimated legacy gas price denominated in atomic units of the native asset\nas a \"0x\"-prefixed hex string."
        },
        "maxFeePerGas": {
          "type": "string",
          "description": "The estimated max fee per gas (EIP-1559) denominated in atomic units of the asset\nas a \"0x\"-prefixed hex string."
        },
        "maxPriorityFeePerGas": {
          "type": "string",
          "description": "The estimated max priority fee per gas (EIP-1559) denominated in atomic units of\nthe native asset as a \"0x\"-prefixed hex string."
        }
      },
      "description": "A message representing a fee estimate on an Ethereum-like network."
    },
    "v1RLPTransaction": {
      "type": "object",
      "properties": {
        "sender": {
          "type": "string",
          "description": "The sender address as a hexadecimal string, prefixed with 0x."
        },
        "transactionRlp": {
          "type": "string",
          "format": "byte",
          "description": "The RLP-encoded transaction as a byte array.\nSee https://github.com/ethereum/go-ethereum/blob/master/rlp/encode.go for an implementation."
        }
      },
      "description": "A message representing a transaction encoded using Recursive-Length Prefix (RLP)\nSerialization. See https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/\nfor more details."
    },
    "v1RequiredSignature": {
      "type": "object",
      "properties": {
        "payload": {
          "type": "string",
          "format": "byte",
          "description": "The payload to be signed. The TransactionInput must be transformed into\nthis payload. For EVM chains, this would be the hash of the type-prefixed\nRLP encoding of the transaction defined in EIP-2718. This is also the\nvalue that should be used in the MPCKeyService's CreateSignature API."
        },
        "signature": {
          "$ref": "#/definitions/v1Signature",
          "description": "The signature representing the signed payload. This must be set in order\nfor a Transaction to be broadcast."
        }
      },
      "description": "A message representing a payload to be signed and its result."
    },
    "v1Signature": {
      "type": "object",
      "properties": {
        "ecdsaSignature": {
          "$ref": "#/definitions/v1ECDSASignature",
          "description": "An ECDSA signature."
        }
      },
      "description": "A digital signature produced by a signing algorithm."
    },
    "v1Transaction": {
      "type": "object",
      "properties": {
        "input": {
          "$ref": "#/definitions/v1TransactionInput",
          "description": "A user-specified transaction in one of the supported input types."
        },
        "requiredSignatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1RequiredSignature"
          },
          "description": "The set of signatures required to broadcast this Transaction.\nFor EVM networks, there will be only one signature."
        },
        "rawSignedTransaction": {
          "type": "string",
          "format": "byte",
          "description": "The signed transaction to be broadcast. This value can be directly broadcast on-chain.\nThe Signatures in required_signatures need to be transformed into this value.\nFor EVM chains, this is just the R, S, and V values of the signature concatenated."
        },
        "hash": {
          "type": "string",
          "description": "The hash of the signed transaction."
        }
      },
      "description": "A message that wraps protocol-specific transactions, and provides additional\npayloads that enable the transaction to be signed and broadcast."
    },
    "v1TransactionFee": {
      "type": "object",
      "properties": {
        "ethereumFee": {
          "$ref": "#/definitions/v1DynamicFeeInput",
          "description": "An EIP-1559 fee on EVM networks."
        }
      },
      "description": "A message representing the fee to be paid for a transaction."
    },
    "v1TransactionInput": {
      "type": "object",
      "properties": {
        "ethereumRlpInput": {
          "$ref": "#/definitions/v1RLPTransaction",
          "description": "An Ethereum RLP transaction."
        },
        "ethereum1559Input": {
          "$ref": "#/definitions/v1EIP1559TransactionInput",
          "description": "An EIP-1559 transaction."
        }
      },
      "description": "A message that contains each of the different transaction types we support."
    }
  }
}
