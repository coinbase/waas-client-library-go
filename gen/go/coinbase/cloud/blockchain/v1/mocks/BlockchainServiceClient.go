// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/coinbase/waas-client-library-go/gen/go/coinbase/cloud/blockchain/v1"
)

// BlockchainServiceClient is an autogenerated mock type for the BlockchainServiceClient type
type BlockchainServiceClient struct {
	mock.Mock
}

// BatchGetAssets provides a mock function with given fields: ctx, in, opts
func (_m *BlockchainServiceClient) BatchGetAssets(ctx context.Context, in *v1.BatchGetAssetsRequest, opts ...grpc.CallOption) (*v1.BatchGetAssetsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1.BatchGetAssetsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v1.BatchGetAssetsRequest, ...grpc.CallOption) *v1.BatchGetAssetsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.BatchGetAssetsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.BatchGetAssetsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAsset provides a mock function with given fields: ctx, in, opts
func (_m *BlockchainServiceClient) GetAsset(ctx context.Context, in *v1.GetAssetRequest, opts ...grpc.CallOption) (*v1.Asset, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1.Asset
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetAssetRequest, ...grpc.CallOption) *v1.Asset); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Asset)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.GetAssetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetwork provides a mock function with given fields: ctx, in, opts
func (_m *BlockchainServiceClient) GetNetwork(ctx context.Context, in *v1.GetNetworkRequest, opts ...grpc.CallOption) (*v1.Network, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1.Network
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetNetworkRequest, ...grpc.CallOption) *v1.Network); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Network)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.GetNetworkRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAssets provides a mock function with given fields: ctx, in, opts
func (_m *BlockchainServiceClient) ListAssets(ctx context.Context, in *v1.ListAssetsRequest, opts ...grpc.CallOption) (*v1.ListAssetsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1.ListAssetsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ListAssetsRequest, ...grpc.CallOption) *v1.ListAssetsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ListAssetsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.ListAssetsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNetworks provides a mock function with given fields: ctx, in, opts
func (_m *BlockchainServiceClient) ListNetworks(ctx context.Context, in *v1.ListNetworksRequest, opts ...grpc.CallOption) (*v1.ListNetworksResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1.ListNetworksResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ListNetworksRequest, ...grpc.CallOption) *v1.ListNetworksResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ListNetworksResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.ListNetworksRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewBlockchainServiceClientT interface {
	mock.TestingT
	Cleanup(func())
}

// NewBlockchainServiceClient creates a new instance of BlockchainServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBlockchainServiceClient(t NewBlockchainServiceClientT) *BlockchainServiceClient {
	mock := &BlockchainServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
