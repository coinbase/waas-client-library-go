syntax = "proto3";

package coinbase.cloud.types.v1;

import "coinbase/cloud/protocols/ethereum/v1/inputs.proto";
import "coinbase/crypto/types/v1/signatures.proto";

option go_package = "github.com/coinbase/waas-client-library-go/gen/go/coinbase/cloud/types/v1";

// A message that wraps protocol-specific transactions, and provides additional
// payloads that enable the transaction to be signed and broadcast.
message Transaction {
  // A user-specified transaction in one of the supported input types.
  TransactionInput input = 1;

  // The set of signatures required to broadcast this Transaction.
  // For EVM networks, there will be only one signature.
  repeated RequiredSignature required_signatures = 2;

  // The signed transaction to be broadcast. This value can be directly broadcast on-chain.
  // The Signatures in required_signatures need to be transformed into this value.
  // For EVM chains, this is just the R, S, and V values of the signature concatenated.
  bytes raw_signed_transaction = 3;

  // The hash of the signed transaction.
  string hash = 4;
}

// A message that contains each of the different transaction types we support.
message TransactionInput {
  oneof input {
    // An Ethereum RLP transaction.
    coinbase.cloud.protocols.ethereum.v1.RLPTransaction ethereum_rlp_input = 1;

    // An EIP-1559 transaction.
    coinbase.cloud.protocols.ethereum.v1.EIP1559TransactionInput ethereum_1559_input = 2;
  }
}

// A message representing a payload to be signed and its result.
message RequiredSignature {
  // The payload to be signed. The TransactionInput must be transformed into
  // this payload. For EVM chains, this would be the hash of the type-prefixed
  // RLP encoding of the transaction defined in EIP-2718. This is also the
  // value that should be used in the MPCKeyService's CreateSignature API.
  bytes payload = 1;

  // The signature representing the signed payload. This must be set in order
  // for a Transaction to be broadcast.
  coinbase.crypto.types.v1.Signature signature = 2;
}

// A message representing the fee to be paid for a transaction.
message TransactionFee {
  // The fee to be paid.
  oneof fee {
    // An EIP-1559 fee on EVM networks.
    coinbase.cloud.protocols.ethereum.v1.DynamicFeeInput ethereum_fee = 1;
  }
}
