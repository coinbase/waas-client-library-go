// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PoolServiceClient is the client API for PoolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PoolServiceClient interface {
	// Creates a Pool. Invoke CreatePool before creating a Pool-scoped resource so that you can specify the Pool as the parent of the new resource.
	CreatePool(ctx context.Context, in *CreatePoolRequest, opts ...grpc.CallOption) (*Pool, error)
	// Retrieves a Pool by resource name.
	GetPool(ctx context.Context, in *GetPoolRequest, opts ...grpc.CallOption) (*Pool, error)
	// Returns a list of Pools.
	ListPools(ctx context.Context, in *ListPoolsRequest, opts ...grpc.CallOption) (*ListPoolsResponse, error)
}

type poolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPoolServiceClient(cc grpc.ClientConnInterface) PoolServiceClient {
	return &poolServiceClient{cc}
}

func (c *poolServiceClient) CreatePool(ctx context.Context, in *CreatePoolRequest, opts ...grpc.CallOption) (*Pool, error) {
	out := new(Pool)
	err := c.cc.Invoke(ctx, "/coinbase.cloud.pools.v1.PoolService/CreatePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolServiceClient) GetPool(ctx context.Context, in *GetPoolRequest, opts ...grpc.CallOption) (*Pool, error) {
	out := new(Pool)
	err := c.cc.Invoke(ctx, "/coinbase.cloud.pools.v1.PoolService/GetPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolServiceClient) ListPools(ctx context.Context, in *ListPoolsRequest, opts ...grpc.CallOption) (*ListPoolsResponse, error) {
	out := new(ListPoolsResponse)
	err := c.cc.Invoke(ctx, "/coinbase.cloud.pools.v1.PoolService/ListPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoolServiceServer is the server API for PoolService service.
// All implementations must embed UnimplementedPoolServiceServer
// for forward compatibility
type PoolServiceServer interface {
	// Creates a Pool. Invoke CreatePool before creating a Pool-scoped resource so that you can specify the Pool as the parent of the new resource.
	CreatePool(context.Context, *CreatePoolRequest) (*Pool, error)
	// Retrieves a Pool by resource name.
	GetPool(context.Context, *GetPoolRequest) (*Pool, error)
	// Returns a list of Pools.
	ListPools(context.Context, *ListPoolsRequest) (*ListPoolsResponse, error)
	mustEmbedUnimplementedPoolServiceServer()
}

// UnimplementedPoolServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPoolServiceServer struct {
}

func (UnimplementedPoolServiceServer) CreatePool(context.Context, *CreatePoolRequest) (*Pool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePool not implemented")
}
func (UnimplementedPoolServiceServer) GetPool(context.Context, *GetPoolRequest) (*Pool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPool not implemented")
}
func (UnimplementedPoolServiceServer) ListPools(context.Context, *ListPoolsRequest) (*ListPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPools not implemented")
}
func (UnimplementedPoolServiceServer) mustEmbedUnimplementedPoolServiceServer() {}

// UnsafePoolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PoolServiceServer will
// result in compilation errors.
type UnsafePoolServiceServer interface {
	mustEmbedUnimplementedPoolServiceServer()
}

func RegisterPoolServiceServer(s grpc.ServiceRegistrar, srv PoolServiceServer) {
	s.RegisterService(&PoolService_ServiceDesc, srv)
}

func _PoolService_CreatePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolServiceServer).CreatePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coinbase.cloud.pools.v1.PoolService/CreatePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolServiceServer).CreatePool(ctx, req.(*CreatePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolService_GetPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolServiceServer).GetPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coinbase.cloud.pools.v1.PoolService/GetPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolServiceServer).GetPool(ctx, req.(*GetPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolService_ListPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolServiceServer).ListPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coinbase.cloud.pools.v1.PoolService/ListPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolServiceServer).ListPools(ctx, req.(*ListPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PoolService_ServiceDesc is the grpc.ServiceDesc for PoolService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PoolService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coinbase.cloud.pools.v1.PoolService",
	HandlerType: (*PoolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePool",
			Handler:    _PoolService_CreatePool_Handler,
		},
		{
			MethodName: "GetPool",
			Handler:    _PoolService_GetPool_Handler,
		},
		{
			MethodName: "ListPools",
			Handler:    _PoolService_ListPools_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coinbase/cloud/pools/v1/pools.proto",
}
