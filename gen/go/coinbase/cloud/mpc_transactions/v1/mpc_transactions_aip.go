// Code generated by protoc-gen-go-aip. DO NOT EDIT.
//
// versions:
// 	protoc-gen-go-aip development
// 	protoc (unknown)
// source: coinbase/cloud/mpc_transactions/v1/mpc_transactions.proto

package v1

import (
	fmt "fmt"
	resourcename "go.einride.tech/aip/resourcename"
	strings "strings"
)

type MPCTransactionResourceName struct {
	PoolId           string
	MpcWalletId      string
	MpcTransactionId string
}

func (n MPCTransactionResourceName) Validate() error {
	if n.PoolId == "" {
		return fmt.Errorf("poolID: empty")
	}
	if strings.IndexByte(n.PoolId, '/') != -1 {
		return fmt.Errorf("poolID: contains illegal character '/'")
	}
	if n.MpcWalletId == "" {
		return fmt.Errorf("mpcWalletID: empty")
	}
	if strings.IndexByte(n.MpcWalletId, '/') != -1 {
		return fmt.Errorf("mpcWalletID: contains illegal character '/'")
	}
	if n.MpcTransactionId == "" {
		return fmt.Errorf("mpcTransactionID: empty")
	}
	if strings.IndexByte(n.MpcTransactionId, '/') != -1 {
		return fmt.Errorf("mpcTransactionID: contains illegal character '/'")
	}
	return nil
}

func (n MPCTransactionResourceName) ContainsWildcard() bool {
	return false || n.PoolId == "-" || n.MpcWalletId == "-" || n.MpcTransactionId == "-"
}

func (n MPCTransactionResourceName) String() string {
	return resourcename.Sprint(
		"pools/{poolID}/mpcWallets/{mpcWalletID}/mpcTransactions/{mpcTransactionID}",
		n.PoolId,
		n.MpcWalletId,
		n.MpcTransactionId,
	)
}

func (n MPCTransactionResourceName) MarshalString() (string, error) {
	if err := n.Validate(); err != nil {
		return "", err
	}
	return n.String(), nil
}

func (n *MPCTransactionResourceName) UnmarshalString(name string) error {
	return resourcename.Sscan(
		name,
		"pools/{poolID}/mpcWallets/{mpcWalletID}/mpcTransactions/{mpcTransactionID}",
		&n.PoolId,
		&n.MpcWalletId,
		&n.MpcTransactionId,
	)
}
