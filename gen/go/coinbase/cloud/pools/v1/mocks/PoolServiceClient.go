// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/coinbase/waas-client-library-go/gen/go/coinbase/cloud/pools/v1"
)

// PoolServiceClient is an autogenerated mock type for the PoolServiceClient type
type PoolServiceClient struct {
	mock.Mock
}

// CreatePool provides a mock function with given fields: ctx, in, opts
func (_m *PoolServiceClient) CreatePool(ctx context.Context, in *v1.CreatePoolRequest, opts ...grpc.CallOption) (*v1.Pool, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1.Pool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreatePoolRequest, ...grpc.CallOption) (*v1.Pool, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreatePoolRequest, ...grpc.CallOption) *v1.Pool); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Pool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.CreatePoolRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPool provides a mock function with given fields: ctx, in, opts
func (_m *PoolServiceClient) GetPool(ctx context.Context, in *v1.GetPoolRequest, opts ...grpc.CallOption) (*v1.Pool, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1.Pool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetPoolRequest, ...grpc.CallOption) (*v1.Pool, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetPoolRequest, ...grpc.CallOption) *v1.Pool); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Pool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.GetPoolRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPools provides a mock function with given fields: ctx, in, opts
func (_m *PoolServiceClient) ListPools(ctx context.Context, in *v1.ListPoolsRequest, opts ...grpc.CallOption) (*v1.ListPoolsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1.ListPoolsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ListPoolsRequest, ...grpc.CallOption) (*v1.ListPoolsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ListPoolsRequest, ...grpc.CallOption) *v1.ListPoolsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ListPoolsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.ListPoolsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPoolServiceClient creates a new instance of PoolServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPoolServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *PoolServiceClient {
	mock := &PoolServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
