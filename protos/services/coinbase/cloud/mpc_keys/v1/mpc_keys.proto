syntax = "proto3";

package coinbase.cloud.mpc_keys.v1;

import "coinbase/crypto/types/v1/keys.proto";
import "coinbase/crypto/types/v1/signatures.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/longrunning/operations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.cbhq.net/cloud/waas-client-library-go/gen/go/coinbase/cloud/mpc_keys/v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "Coinbase Cloud - WaaS MPC Keys API";
        version: "1.0";
    };
    host: "https://api.coinbasecloud.com/waas/mpcKeys"
    schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
};

// MPCKeyService provides APIs for participating in cryptographic operations through 
// multi-party computation (MPC). It should be be used in conjunction with the client-side
// WaaS SDK. The cryptographic Keys are created using an underlying Hierarchically Deterministic
// (HD) Tree, following the conventions of BIP-32 and BIP-44.
//
// The general flow is as follows:
// 1. Call RegisterDevice to enroll the mobile Device.
// 2. Call CreateDeviceGroup with the registered Device as its sole member and at least
// one HardenedChild set on the Seed.
// 3. Poll for the pending DeviceGroup with ListMPCOperations and compute the MPCOperation
// using the WaaS SDK.
// 4. Call CreateMPCKey, specifying the created DeviceGroup and desired derivation path.
// 5. Call CreateSignature, specifying the created MPCKey and payload.
// 6. Poll for the pending Signature with ListMPCOperations and compute the MPCOperation
// using the SDK.
service MPCKeyService {
  option (google.api.default_host) = "api.coinbasecloud.com/waas/mpcKeys";
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "MPCKeyService provides APIs for participating in cryptographic operations through multi-party computation (MPC). It should be be used in conjunction with the client-side WaaS SDK. The cryptographic Keys are created using an underlying Hierarchically Deterministic (HD) Tree, following the conventions of BIP-32 and BIP-44. The general flow is as follows:\n 1. Call RegisterDevice to enroll the mobile Device.\n 2. Call CreateDeviceGroup with the registered Device as its sole member and at least one HardenedChild set on the Seed.\n 3. Poll for the pending DeviceGroup with ListMPCOperations and compute the MPCOperation using the WaaS SDK.\n 4. Call CreateMPCKey, specifying the created DeviceGroup and desired derivation path.\n 5. Call CreateSignature, specifying the created MPCKey and payload.\n 6. Poll for the pending Signature with ListMPCOperations and compute the MPCOperation using the WaaS SDK." 
  };

  // Registers a new Device. A Device must be registered before it can be added to a DeviceGroup.
  rpc RegisterDevice(RegisterDeviceRequest) returns (Device){
    option (google.api.http) = {
      post: "/v1:registerDevice"
      body: "*"
    };
    option (google.api.method_signature) = "registration_data";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "RegisterDevice"
      description: "Registers a new Device. A Device must be registered before it can be added to a DeviceGroup."
    };
  }

  // Gets a Device.
  rpc GetDevice(GetDeviceRequest) returns (Device) {
    option (google.api.http) = {
      get: "/v1/{name=devices/*}"
    };
    option (google.api.method_signature) = "name";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "GetDevice"
      description: "Gets a Device."
    };
  }

  // Creates a DeviceGroup. The DeviceGroup must contain exactly one registered Device, and
  // the Seed in the DeviceGroup must have at least one HardenedChild. After calling this,
  // use ListMPCOperations to poll for the pending CreateDeviceGroup operation, and use the WaaS SDK's 
  // ComputeMPCOperation to complete the operation.
  rpc CreateDeviceGroup(CreateDeviceGroupRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1/{parent=pools/*}/deviceGroups"
      body: "device_group"
    };
    option (google.api.method_signature) = "parent,device_group,device_group_id";
    option (google.longrunning.operation_info) = {
      response_type: "DeviceGroup"
      metadata_type: "CreateDeviceGroupMetadata"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "CreateDeviceGroup"
      description: "Creates a DeviceGroup. The DeviceGroup must contain exactly one registered Device, and the Seed in the DeviceGroup must have at least one HardenedChild. After calling this, use ListMPCOperations to poll for the pending CreateDeviceGroup operation, and use the WaaS SDK's ComputeMPCOperation to complete the operation."
    };
  }

  // Gets a DeviceGroup.
  rpc GetDeviceGroup(GetDeviceGroupRequest) returns (DeviceGroup) {
    option (google.api.http) = {
      get: "/v1/{name=pools/*/deviceGroups/*}"
    };
    option (google.api.method_signature) = "name";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "GetDeviceGroup"
      description: "Gets a DeviceGroup."
    };
  }

  // Lists the pending MPCOperations awaiting computation associated with the given
  // parent DeviceGroup. Use this API in combination with the WaaS SDK's ComputeMPCOperation
  // method to complete the operation.
  rpc ListMPCOperations(ListMPCOperationsRequest) returns (ListMPCOperationsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=pools/*/deviceGroups/*}/mpcOperations"
    };
    option (google.api.method_signature) = "parent";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "ListMPCOperations"
      description: "Lists the pending MPCOperations awaiting computation associated with the given parent DeviceGroup. Use this API in combination with the WaaS SDK's ComputeMPCOperation method to complete the operation."
    };
  }

  // Creates an MPCKey. There must be a HardenedChild in the Seed of the parent
  // DeviceGroup which is a prefix of the derivation path provided in the MPCKey.
  rpc CreateMPCKey(CreateMPCKeyRequest) returns (MPCKey) {
    option (google.api.http) = {
      post: "/v1/{parent=pools/*/deviceGroups/*}/mpcKeys"
      body: "mpc_key"
    };
    option (google.api.method_signature) = "mpc_key";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "CreateMPCKey"
      description: "Creates an MPCKey. There must be a HardenedChild in the Seed of the parent DeviceGroup which is a prefix of the derivation path provided in the MPCKey."
    };
  }

  // Gets an MPCKey.
  rpc GetMPCKey(GetMPCKeyRequest) returns (MPCKey) {
    option (google.api.http) = {
      get: "/v1/{name=pools/*/deviceGroups/*/mpcKeys/*}"
    };
    option (google.api.method_signature) = "name";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "GetMPCKey"
      description: "Gets an MPCKey."
    };
  }

  // Creates a Signature using an MPCKey. After calling this, use ListMPCOperations 
  // to poll for the pending CreateSignature operation, and use the WaaS SDK's 
  // ComputeMPCOperation to complete the operation.
  rpc CreateSignature(CreateSignatureRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1/{parent=pools/*/deviceGroups/*/mpcKeys/*}/signatures"
      body: "signature"
    };
    option (google.api.method_signature) = "parent,signature";
    option (google.longrunning.operation_info) = {
      response_type: "Signature"
      metadata_type: "CreateSignatureMetadata"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "CreateSignature"
      description: "Creates a Signature using an MPCKey. After calling this, use ListMPCOperations to poll for the pending CreateSignature operation, and use the WaaS SDK's ComputeMPCOperation to complete the operation."
    };
  }
};

// The Device resource, which represents a single participant in the MPC protocol.
message Device {
  option (google.api.resource) = {
    type: "api.coinbasecloud.com/waas/mpcKeys/Device"
    pattern: "devices/{deviceID}"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Device"
      description: "The Device resource, which represents a single participant in the MPC protocol."    }
  };

  // The resource name of the Device.
  // Format: devices/{deviceID}
  string name = 1[
    (google.api.field_behavior) = OUTPUT_ONLY,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      title: "name"
      description: "The resource name of the Device.\nFormat: devices/{deviceID}",
    }
  ];
}

// A child of a Seed in an HD tree that was produced using hardened derivation,
// as defined in BIP-32. All MPCKeys descend from a HardenedChild.
message HardenedChild {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "HardenedChild"
      description: "A child of a Seed in an HD tree that was produced using hardened derivation, as defined in BIP-32. All MPCKeys descend from a HardenedChild."
    }
  };

  // The derivation path to reach the hardened child from the Seed (i.e. the root
  // of the HD tree). Each integer in the derivation path is interpreted according
  // to BIP-44: m / purpose’ / coin_type’ / account’ / change / address_index
  repeated uint32 derivation_path = 1 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      title: "name"
      description: "The derivation path to reach the hardened child from the Seed (i.e. the root of the HD tree).Each integer in the derivation path is interpreted according to BIP-44: m / purpose’ / coin_type’ / account’ / change / address_index"   
    }
  ];
}

// A byte sequence at the root of a Hierarchically Deterministic (HD) wallet
// as defined in BIP-32. A DeviceGroup has exactly one Seed.
message Seed {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Seed"
      description: "A byte sequence at the root of a Hierarchically Deterministic (HD) wallet as defined in BIP-32. A DeviceGroup has exactly one Seed."
    }
  };

  // The hardened children derived from the Seed. To create an MPCKey,
  // at least one hardened child must be derived.
  repeated HardenedChild hardened_children = 1 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      title: "hardenedChildren"
      description: "The hardened children derived from the Seed. To create an MPCKey, at least one hardened child must be derived.",
    }
  ];
}

// The DeviceGroup resource, which represents a collection of Devices that have access to the
// same set of Seed resources.
message DeviceGroup {
  option (google.api.resource) = {
    type: "api.coinbasecloud.com/waas/mpcKeys/DeviceGroup"
    pattern: "pools/{poolID}/deviceGroups/{deviceGroupID}"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "DeviceGroup"
      description: "The DeviceGroup resource, which represents a collection of Devices that have access to the same set of Seed resources."
    }
  };

  // The resource name of the DeviceGroup.
  // Format: pools/{poolID}/deviceGroups/{deviceGroupID}
  string name = 1 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      title: "name"
      description: "The resource name of the DeviceGroup.\nFormat: pools/{poolID}/deviceGroups/{deviceGroupID}",
    }
  ];

  // The list of Device resource names associated with this DeviceGroup. On creation,
  // this list must have exactly one Device set.
  // Format: devices/{deviceID}
  repeated string devices = 2 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      title: "devices"
      description: "The list of Device resource names associated with this DeviceGroup. On creation, this list must have exactly one Device set.\nFormat: devices/{device}",
    }
  ];

  // The Seed that corresponds to the DeviceGroup. On creation, the Seed must
  // have at least one HardenedChild set.
  Seed seed = 3 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      title: "seed"
      description: "The Seed that corresponds to the DeviceGroup. On creation, the Seed must have at least one HardenedChild set."
    }
  ];
}

// The MPCOperation resource, which represents a pending MPC operation of a DeviceGroup
// waiting for computation. Poll the ListMPCOperations method for these pending MPCOperations,
// and use the WaaS SDK's ComputeMPCOperation to complete the operation.
// The MPCOperation resource ID is guaranteed to be the same as that of the underlying
// long-running operation.
message MPCOperation {
  option (google.api.resource) = {
    type: "api.coinbasecloud.com/waas/mpcKeys/MPCOperation"
    pattern: "pools/{poolID}/deviceGroups/{deviceGroupID}/mpcOperations/{mpcOperationID}"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "MPCOperation"
      description: "The MPCOperation resource, which represents a pending MPC operation of a DeviceGroup waiting for computation. Poll the ListMPCOperations method for these pending MPCOperations, and use the WaaS SDK's ComputeMPCOperation to complete the operation. The MPCOperation resource ID is guaranteed to be the same as that of the underlying long-running operation."
    }
  };

  // The resource name of the MPCOperation.
  // Format: pools/{poolID}/deviceGroups/{deviceGroupID}/mpcOperations/{mpcOperationID}
  string name = 1 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      title: "name"
      description: "The resource name of the MPCOperation.\nFormat: pools/{poolID}/deviceGroups/{deviceGroupID}/mpcOperations/{mpcOperationID}",
    }
  ];

  // Metadata related to the MPC operation.
  oneof metadata {
    // Metadata associated with the CreateDeviceGroup long-running operation.
    CreateDeviceGroupMetadata create_device_group_metadata = 2 [
      (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        title: "createDeviceGroupMetadata"
        description: "Metadata associated with the CreateDeviceGroup long-running operation."
      }
    ];
    // Metadata associated with the CreateSignature long-running operation.
    CreateSignatureMetadata create_signature_metadata = 3 [
      (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        title: "createSignatureMetadata"
        description: "Metadata associated with the CreateSignature long-running operation."
      }
    ];
  }
}

// The MPC Key resource. An MPC Key can be used to participate in distributed M-of-N signing
// via the WaaS SDK. An MPC Key is created from a Seed.
message MPCKey {
  option (google.api.resource) = {
    type: "api.coinbasecloud.com/waas/mpcKeys/MPCKey"
    pattern: "pools/{poolID}/deviceGroups/{deviceGroupID}/mpcKeys/{mpcKeyID}"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "MPCKey"
      description: "The MPC Key resource. An MPC Key can be used to participate in distributed M-of-N signing via the WaaS SDK. An MPC Key is created from a Seed."
    }
  };

  // The resource name of the MPCKey.
  // Format: pools/{poolID}/deviceGroups/{deviceGroupID}/mpcKeys/{mpcKeyID}
  string name = 1 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      title: "name"
      description: "The resource name of the MPCKey.\nFormat: pools/{poolID}/deviceGroups/{deviceGroupID}/mpcKeys/{mpcKeyID}",
    }
  ];

  // The derivation path to reach this MPCKey from the Seed (i.e. the root
  // of the HD tree). There must be a HardenedChild in the Seed of the parent
  // DeviceGroup which is a prefix of this derivation path.
  repeated uint32 derivation_path = 2 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      title: "derivationPath"
      description: "The derivation path to reach this MPCKey from the Seed (i.e. the root of the HD tree). There must be a HardenedChild in the Seed of the parent DeviceGroup which is a prefix of this derivation path."
    }
  ];

  // The public portion of the MPCKey. 
  coinbase.crypto.types.v1.PublicKey public_key = 3 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      title: "publicKey"
      description: "The public portion of the MPCKey."
    }
  ];
}

// The Signature resource. Signatures can be created with distributed M-of-N signing
// using MPCKeys via the WaaS SDK.
message Signature {
  option (google.api.resource) = {
    type: "api.coinbasecloud.com/waas/mpcKeys/Signature"
    pattern: "pools/{poolID}/deviceGroups/{deviceGroupID}/mpcKeys/{mpcKeyID}/signatures/{signatureID}"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Signature"
      description: "The Signature resource. Signatures can be created with distributed M-of-N signing using MPCKeys via the WaaS SDK."
    }
  };

  // The resource name of the Signature.
  // Format: pools/{poolID}/deviceGroups/{deviceGroupID}/mpcKeys/{mpcKeyID}/signatures/{signatureID}
  string name = 1 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      title: "name"
      description: "The resource name of the Signature.\nFormat: pools/{poolID}/deviceGroups/{deviceGroupID}/mpcKeys/{mpcKeyID}/signatures/{signatureID}",
    }
  ];

  // The payload to sign with the MPCKey.
  bytes payload = 2 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      title: "name"
      description: "The payload to sign with the MPCKey."
    }
  ];

  // The payload which has been signed with the MPCKey.
  coinbase.crypto.types.v1.Signature signature = 3 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      title: "signature"
      description: "The payload which has been signed with the MPCKey."
    }
  ];
}

// The request message for RegisterDevice.
message RegisterDeviceRequest {
  // Data required to register the device. This should be gotten from the WaaS SDK's
  // GetRegistrationData method.
  bytes registration_data = 1 [(google.api.field_behavior) = REQUIRED];

  // A user-provided request ID to allow for idempotency. This should be a UUID.
  string request_id = 2 [(google.api.field_behavior) = OPTIONAL];  
}

// The request message for GetDevice.
message GetDeviceRequest {
  // The resource name of the Device to get.
  // Format: devices/{deviceID}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "api.coinbasecloud.com/waas/mpcKeys/Device"},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      field_configuration: {path_param_name: "deviceName"}
    }
  ];
}

// The request message for CreateDeviceGroup.
message CreateDeviceGroupRequest {
  // The resource name of the parent Pool.
  // Format: pools/{poolID}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {child_type: "api.coinbasecloud.com/waas/mpcKeys/DeviceGroup"},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      field_configuration: {path_param_name: "poolName"}
    }
  ];

  // The DeviceGroup to be created. This must contain exactly one registered Device, and
  // the contained Seed must have at least one HardenedChild.
  DeviceGroup device_group = 2 [(google.api.field_behavior) = REQUIRED];

  // Optional: the ID to use for the DeviceGroup, which will become the final component
  // of the DeviceGroup's resource name. If not provided, the server will assign a DeviceGroup ID
  // automatically.
  string device_group_id = 3 [(google.api.field_behavior) = OPTIONAL];

  // A user-provided request ID to allow for idempotency. This should be a UUID.
  string request_id = 4 [(google.api.field_behavior) = OPTIONAL];
}

// Metadata associated with the CreateDeviceGroup long-running operation.
message CreateDeviceGroupMetadata {
  // Data that should be passed to the WaaS SDK's ComputeMPCOperation function
  // to complete the operation.
  bytes mpc_data = 1 [(google.api.field_behavior) = REQUIRED];
}

// The request message for GetDeviceGroup.
message GetDeviceGroupRequest {
  // The resource name of the DeviceGroup to get.
  // Format: pools/{poolID}/deviceGroups/{deviceGroupID}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "api.coinbasecloud.com/waas/mpcKeys/DeviceGroup"},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      field_configuration: {path_param_name: "deviceGroupName"}
    }
  ];
}

// The request message for ListMPCOperations.
message ListMPCOperationsRequest {
  // The resource name of the parent DeviceGroup.
  // Format: pools/{poolID}/deviceGroups/{deviceGroupID}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {child_type: "api.coinbasecloud.com/waas/mpcKeys/MPCOperation"},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      field_configuration: {path_param_name: "deviceGroupName"}
    }
  ];
}

// The response message for ListMPCOperations.
message ListMPCOperationsResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "ListMPCOperationsResponse"
      description: "The response message for ListMPCOperations."
    }
  };

  // The list of MPCOperations.
  repeated MPCOperation mpc_operations = 1;
}

// The request message for CreateMPCKey.
message CreateMPCKeyRequest {
  // The resource name of the parent DeviceGroup.
  // Format: pools/{poolID}/deviceGroups/{deviceGroupID}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {child_type: "api.coinbasecloud.com/waas/mpcKeys/MPCKey"},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      field_configuration: {path_param_name: "deviceGroupName"}
    }
  ];

  // The MPCKey to be created. 
  MPCKey mpc_key = 2 [(google.api.field_behavior) = REQUIRED];

  // A user-provided request ID to allow for idempotency. This should be a UUID.
  string request_id = 3 [(google.api.field_behavior) = OPTIONAL];
}

// The request message for GetMPCKey.
message GetMPCKeyRequest {
  // The resource name of the MPCKey to get.
  // Format: pools/{poolID}/deviceGroups/{deviceGroupID}/mpcKeys/{mpcKeyID}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "api.coinbasecloud.com/waas/mpcKeys/MPCKey"},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      field_configuration: {path_param_name: "mpcKeyName"}
    }
  ];
}

// The request message for CreateSignature.
message CreateSignatureRequest {
  // The resource name of the parent MPCKey.
  // Format: pools/{poolID}/deviceGroups/{deviceGroupID}/mpcKeys/{mpcKeyID}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {child_type: "api.coinbasecloud.com/waas/mpcKeys/Signature"},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      field_configuration: {path_param_name: "mpcKeyName"}
    }
  ];

  // The Signature to be created.
  Signature signature = 2 [(google.api.field_behavior) = REQUIRED];

  // A user-provided request ID to allow for idempotency. This should be a UUID.
  string request_id = 3 [(google.api.field_behavior) = OPTIONAL];
}

// Metadata associated with the CreateSignature long-running operation.
message CreateSignatureMetadata {
  // Data that should be passed to the WaaS SDK's ComputeMPCOperation function
  // to complete the operation.
  bytes mpc_data = 1 [(google.api.field_behavior) = REQUIRED];

  // The payload that is about to be signed. Check this value to ensure that the
  // correct payload is being signed.
  bytes payload = 2 [(google.api.field_behavior) = REQUIRED];
}
