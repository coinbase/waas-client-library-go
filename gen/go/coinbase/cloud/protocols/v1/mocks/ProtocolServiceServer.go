// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	v1 "github.com/coinbase/waas-client-library-go/gen/go/coinbase/cloud/protocols/v1"
	typesv1 "github.com/coinbase/waas-client-library-go/gen/go/coinbase/cloud/types/v1"
	mock "github.com/stretchr/testify/mock"
)

// ProtocolServiceServer is an autogenerated mock type for the ProtocolServiceServer type
type ProtocolServiceServer struct {
	mock.Mock
}

// BroadcastTransaction provides a mock function with given fields: _a0, _a1
func (_m *ProtocolServiceServer) BroadcastTransaction(_a0 context.Context, _a1 *v1.BroadcastTransactionRequest) (*typesv1.Transaction, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *typesv1.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, *v1.BroadcastTransactionRequest) *typesv1.Transaction); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*typesv1.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.BroadcastTransactionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConstructTransaction provides a mock function with given fields: _a0, _a1
func (_m *ProtocolServiceServer) ConstructTransaction(_a0 context.Context, _a1 *v1.ConstructTransactionRequest) (*typesv1.Transaction, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *typesv1.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ConstructTransactionRequest) *typesv1.Transaction); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*typesv1.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.ConstructTransactionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConstructTransferTransaction provides a mock function with given fields: _a0, _a1
func (_m *ProtocolServiceServer) ConstructTransferTransaction(_a0 context.Context, _a1 *v1.ConstructTransferTransactionRequest) (*typesv1.Transaction, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *typesv1.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ConstructTransferTransactionRequest) *typesv1.Transaction); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*typesv1.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.ConstructTransferTransactionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EstimateFee provides a mock function with given fields: _a0, _a1
func (_m *ProtocolServiceServer) EstimateFee(_a0 context.Context, _a1 *v1.EstimateFeeRequest) (*v1.EstimateFeeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.EstimateFeeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v1.EstimateFeeRequest) *v1.EstimateFeeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.EstimateFeeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.EstimateFeeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedProtocolServiceServer provides a mock function with given fields:
func (_m *ProtocolServiceServer) mustEmbedUnimplementedProtocolServiceServer() {
	_m.Called()
}

type NewProtocolServiceServerT interface {
	mock.TestingT
	Cleanup(func())
}

// NewProtocolServiceServer creates a new instance of ProtocolServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProtocolServiceServer(t NewProtocolServiceServerT) *ProtocolServiceServer {
	mock := &ProtocolServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
