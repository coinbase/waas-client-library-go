// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	clientsv1 "github.com/coinbase/waas-client-library-go/clients/v1"

	gax "github.com/googleapis/gax-go/v2"

	grpc "google.golang.org/grpc"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/coinbase/waas-client-library-go/gen/go/coinbase/cloud/mpc_keys/v1"
)

// MPCKeyServiceClient is an autogenerated mock type for the MPCKeyServiceClient type
type MPCKeyServiceClient struct {
	mock.Mock
}

// AddDevice provides a mock function with given fields: ctx, req, opts
func (_m *MPCKeyServiceClient) AddDevice(ctx context.Context, req *v1.AddDeviceRequest, opts ...gax.CallOption) (clientsv1.ClientWrappedAddDeviceOperation, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 clientsv1.ClientWrappedAddDeviceOperation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.AddDeviceRequest, ...gax.CallOption) (clientsv1.ClientWrappedAddDeviceOperation, error)); ok {
		return rf(ctx, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.AddDeviceRequest, ...gax.CallOption) clientsv1.ClientWrappedAddDeviceOperation); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clientsv1.ClientWrappedAddDeviceOperation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.AddDeviceRequest, ...gax.CallOption) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddDeviceOperation provides a mock function with given fields: name
func (_m *MPCKeyServiceClient) AddDeviceOperation(name string) clientsv1.ClientWrappedAddDeviceOperation {
	ret := _m.Called(name)

	var r0 clientsv1.ClientWrappedAddDeviceOperation
	if rf, ok := ret.Get(0).(func(string) clientsv1.ClientWrappedAddDeviceOperation); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clientsv1.ClientWrappedAddDeviceOperation)
		}
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *MPCKeyServiceClient) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connection provides a mock function with given fields:
func (_m *MPCKeyServiceClient) Connection() *grpc.ClientConn {
	ret := _m.Called()

	var r0 *grpc.ClientConn
	if rf, ok := ret.Get(0).(func() *grpc.ClientConn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ClientConn)
		}
	}

	return r0
}

// CreateDeviceGroup provides a mock function with given fields: ctx, req, opts
func (_m *MPCKeyServiceClient) CreateDeviceGroup(ctx context.Context, req *v1.CreateDeviceGroupRequest, opts ...gax.CallOption) (clientsv1.ClientWrappedCreateDeviceGroupOperation, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 clientsv1.ClientWrappedCreateDeviceGroupOperation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateDeviceGroupRequest, ...gax.CallOption) (clientsv1.ClientWrappedCreateDeviceGroupOperation, error)); ok {
		return rf(ctx, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateDeviceGroupRequest, ...gax.CallOption) clientsv1.ClientWrappedCreateDeviceGroupOperation); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clientsv1.ClientWrappedCreateDeviceGroupOperation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.CreateDeviceGroupRequest, ...gax.CallOption) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeviceGroupOperation provides a mock function with given fields: name
func (_m *MPCKeyServiceClient) CreateDeviceGroupOperation(name string) clientsv1.ClientWrappedCreateDeviceGroupOperation {
	ret := _m.Called(name)

	var r0 clientsv1.ClientWrappedCreateDeviceGroupOperation
	if rf, ok := ret.Get(0).(func(string) clientsv1.ClientWrappedCreateDeviceGroupOperation); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clientsv1.ClientWrappedCreateDeviceGroupOperation)
		}
	}

	return r0
}

// CreateMPCKey provides a mock function with given fields: ctx, req, opts
func (_m *MPCKeyServiceClient) CreateMPCKey(ctx context.Context, req *v1.CreateMPCKeyRequest, opts ...gax.CallOption) (*v1.MPCKey, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1.MPCKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateMPCKeyRequest, ...gax.CallOption) (*v1.MPCKey, error)); ok {
		return rf(ctx, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateMPCKeyRequest, ...gax.CallOption) *v1.MPCKey); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.MPCKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.CreateMPCKeyRequest, ...gax.CallOption) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSignature provides a mock function with given fields: ctx, req, opts
func (_m *MPCKeyServiceClient) CreateSignature(ctx context.Context, req *v1.CreateSignatureRequest, opts ...gax.CallOption) (clientsv1.ClientWrappedCreateSignatureOperation, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 clientsv1.ClientWrappedCreateSignatureOperation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateSignatureRequest, ...gax.CallOption) (clientsv1.ClientWrappedCreateSignatureOperation, error)); ok {
		return rf(ctx, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateSignatureRequest, ...gax.CallOption) clientsv1.ClientWrappedCreateSignatureOperation); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clientsv1.ClientWrappedCreateSignatureOperation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.CreateSignatureRequest, ...gax.CallOption) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSignatureOperation provides a mock function with given fields: name
func (_m *MPCKeyServiceClient) CreateSignatureOperation(name string) clientsv1.ClientWrappedCreateSignatureOperation {
	ret := _m.Called(name)

	var r0 clientsv1.ClientWrappedCreateSignatureOperation
	if rf, ok := ret.Get(0).(func(string) clientsv1.ClientWrappedCreateSignatureOperation); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clientsv1.ClientWrappedCreateSignatureOperation)
		}
	}

	return r0
}

// GetDevice provides a mock function with given fields: ctx, req, opts
func (_m *MPCKeyServiceClient) GetDevice(ctx context.Context, req *v1.GetDeviceRequest, opts ...gax.CallOption) (*v1.Device, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetDeviceRequest, ...gax.CallOption) (*v1.Device, error)); ok {
		return rf(ctx, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetDeviceRequest, ...gax.CallOption) *v1.Device); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.GetDeviceRequest, ...gax.CallOption) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceGroup provides a mock function with given fields: ctx, req, opts
func (_m *MPCKeyServiceClient) GetDeviceGroup(ctx context.Context, req *v1.GetDeviceGroupRequest, opts ...gax.CallOption) (*v1.DeviceGroup, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1.DeviceGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetDeviceGroupRequest, ...gax.CallOption) (*v1.DeviceGroup, error)); ok {
		return rf(ctx, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetDeviceGroupRequest, ...gax.CallOption) *v1.DeviceGroup); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.DeviceGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.GetDeviceGroupRequest, ...gax.CallOption) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMPCKey provides a mock function with given fields: ctx, req, opts
func (_m *MPCKeyServiceClient) GetMPCKey(ctx context.Context, req *v1.GetMPCKeyRequest, opts ...gax.CallOption) (*v1.MPCKey, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1.MPCKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetMPCKeyRequest, ...gax.CallOption) (*v1.MPCKey, error)); ok {
		return rf(ctx, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetMPCKeyRequest, ...gax.CallOption) *v1.MPCKey); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.MPCKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.GetMPCKeyRequest, ...gax.CallOption) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperation provides a mock function with given fields: ctx, req, opts
func (_m *MPCKeyServiceClient) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *longrunningpb.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *longrunningpb.GetOperationRequest, ...gax.CallOption) (*longrunningpb.Operation, error)); ok {
		return rf(ctx, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *longrunningpb.GetOperationRequest, ...gax.CallOption) *longrunningpb.Operation); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*longrunningpb.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *longrunningpb.GetOperationRequest, ...gax.CallOption) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMPCOperations provides a mock function with given fields: ctx, req, opts
func (_m *MPCKeyServiceClient) ListMPCOperations(ctx context.Context, req *v1.ListMPCOperationsRequest, opts ...gax.CallOption) (*v1.ListMPCOperationsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1.ListMPCOperationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ListMPCOperationsRequest, ...gax.CallOption) (*v1.ListMPCOperationsResponse, error)); ok {
		return rf(ctx, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ListMPCOperationsRequest, ...gax.CallOption) *v1.ListMPCOperationsResponse); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ListMPCOperationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.ListMPCOperationsRequest, ...gax.CallOption) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrepareDeviceArchive provides a mock function with given fields: ctx, req, opts
func (_m *MPCKeyServiceClient) PrepareDeviceArchive(ctx context.Context, req *v1.PrepareDeviceArchiveRequest, opts ...gax.CallOption) (clientsv1.ClientWrappedPrepareDeviceArchiveOperation, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 clientsv1.ClientWrappedPrepareDeviceArchiveOperation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.PrepareDeviceArchiveRequest, ...gax.CallOption) (clientsv1.ClientWrappedPrepareDeviceArchiveOperation, error)); ok {
		return rf(ctx, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.PrepareDeviceArchiveRequest, ...gax.CallOption) clientsv1.ClientWrappedPrepareDeviceArchiveOperation); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clientsv1.ClientWrappedPrepareDeviceArchiveOperation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.PrepareDeviceArchiveRequest, ...gax.CallOption) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrepareDeviceArchiveOperation provides a mock function with given fields: name
func (_m *MPCKeyServiceClient) PrepareDeviceArchiveOperation(name string) clientsv1.ClientWrappedPrepareDeviceArchiveOperation {
	ret := _m.Called(name)

	var r0 clientsv1.ClientWrappedPrepareDeviceArchiveOperation
	if rf, ok := ret.Get(0).(func(string) clientsv1.ClientWrappedPrepareDeviceArchiveOperation); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clientsv1.ClientWrappedPrepareDeviceArchiveOperation)
		}
	}

	return r0
}

// PrepareDeviceBackup provides a mock function with given fields: ctx, req, opts
func (_m *MPCKeyServiceClient) PrepareDeviceBackup(ctx context.Context, req *v1.PrepareDeviceBackupRequest, opts ...gax.CallOption) (clientsv1.ClientWrappedPrepareDeviceBackupOperation, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 clientsv1.ClientWrappedPrepareDeviceBackupOperation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.PrepareDeviceBackupRequest, ...gax.CallOption) (clientsv1.ClientWrappedPrepareDeviceBackupOperation, error)); ok {
		return rf(ctx, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.PrepareDeviceBackupRequest, ...gax.CallOption) clientsv1.ClientWrappedPrepareDeviceBackupOperation); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clientsv1.ClientWrappedPrepareDeviceBackupOperation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.PrepareDeviceBackupRequest, ...gax.CallOption) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrepareDeviceBackupOperation provides a mock function with given fields: name
func (_m *MPCKeyServiceClient) PrepareDeviceBackupOperation(name string) clientsv1.ClientWrappedPrepareDeviceBackupOperation {
	ret := _m.Called(name)

	var r0 clientsv1.ClientWrappedPrepareDeviceBackupOperation
	if rf, ok := ret.Get(0).(func(string) clientsv1.ClientWrappedPrepareDeviceBackupOperation); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clientsv1.ClientWrappedPrepareDeviceBackupOperation)
		}
	}

	return r0
}

// RegisterDevice provides a mock function with given fields: ctx, req, opts
func (_m *MPCKeyServiceClient) RegisterDevice(ctx context.Context, req *v1.RegisterDeviceRequest, opts ...gax.CallOption) (*v1.Device, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.RegisterDeviceRequest, ...gax.CallOption) (*v1.Device, error)); ok {
		return rf(ctx, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.RegisterDeviceRequest, ...gax.CallOption) *v1.Device); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.RegisterDeviceRequest, ...gax.CallOption) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeDevice provides a mock function with given fields: ctx, req, opts
func (_m *MPCKeyServiceClient) RevokeDevice(ctx context.Context, req *v1.RevokeDeviceRequest, opts ...gax.CallOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.RevokeDeviceRequest, ...gax.CallOption) error); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMPCKeyServiceClient creates a new instance of MPCKeyServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMPCKeyServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MPCKeyServiceClient {
	mock := &MPCKeyServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
