// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	v1 "github.com/coinbase/waas-client-library-go/gen/go/coinbase/cloud/blockchain/v1"
	mock "github.com/stretchr/testify/mock"
)

// BlockchainServiceServer is an autogenerated mock type for the BlockchainServiceServer type
type BlockchainServiceServer struct {
	mock.Mock
}

// BatchGetAssets provides a mock function with given fields: _a0, _a1
func (_m *BlockchainServiceServer) BatchGetAssets(_a0 context.Context, _a1 *v1.BatchGetAssetsRequest) (*v1.BatchGetAssetsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.BatchGetAssetsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.BatchGetAssetsRequest) (*v1.BatchGetAssetsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.BatchGetAssetsRequest) *v1.BatchGetAssetsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.BatchGetAssetsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.BatchGetAssetsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAsset provides a mock function with given fields: _a0, _a1
func (_m *BlockchainServiceServer) GetAsset(_a0 context.Context, _a1 *v1.GetAssetRequest) (*v1.Asset, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetAssetRequest) (*v1.Asset, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetAssetRequest) *v1.Asset); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Asset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.GetAssetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetwork provides a mock function with given fields: _a0, _a1
func (_m *BlockchainServiceServer) GetNetwork(_a0 context.Context, _a1 *v1.GetNetworkRequest) (*v1.Network, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.Network
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetNetworkRequest) (*v1.Network, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetNetworkRequest) *v1.Network); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Network)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.GetNetworkRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAssets provides a mock function with given fields: _a0, _a1
func (_m *BlockchainServiceServer) ListAssets(_a0 context.Context, _a1 *v1.ListAssetsRequest) (*v1.ListAssetsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.ListAssetsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ListAssetsRequest) (*v1.ListAssetsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ListAssetsRequest) *v1.ListAssetsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ListAssetsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.ListAssetsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNetworks provides a mock function with given fields: _a0, _a1
func (_m *BlockchainServiceServer) ListNetworks(_a0 context.Context, _a1 *v1.ListNetworksRequest) (*v1.ListNetworksResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.ListNetworksResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ListNetworksRequest) (*v1.ListNetworksResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ListNetworksRequest) *v1.ListNetworksResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ListNetworksResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.ListNetworksRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedBlockchainServiceServer provides a mock function with given fields:
func (_m *BlockchainServiceServer) mustEmbedUnimplementedBlockchainServiceServer() {
	_m.Called()
}

// NewBlockchainServiceServer creates a new instance of BlockchainServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlockchainServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlockchainServiceServer {
	mock := &BlockchainServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
